{
  "$id": "urn:uuid:f83d84a1-b27b-441a-ae32-314b3de3315a",
  "$schema": "http://json-schema.org/draft-07/schema#",

  "title": "ADC Declaration",
  "description": "A declarative configuration for an ADC such as F5 BIG-IP",
  "type": "object",

  "properties": {
    "class": {
        "title": "Class",
        "description": "Indicates this JSON document is an ADC declaration",
        "type": "string",
        "const": "ADC"
    },
    "updateMode": {
        "title": "Update mode",
        "description": "When set to 'selective' (default) Tenants not referenced in declaration will not be modified.  Otherwise ('complete') unreferenced Tenants will be removed",
        "type": "string",
        "enum": [ "complete", "selective" ],
        "default": "selective"
    },
    "schemaVersion": {
        "title": "Schema version",
        "description": "Version of ADC Declaration schema this declaration is based on",
        "type": "string",
        "$comment": "IMPORTANT: In enum array, please put current schema version first, oldest-supported version last.  Keep enum array sorted most-recent-first.",
        "enum": [ "3.0.0" ]
    },
    "id": {
        "title": "Declaration ID",
        "description": "Unique identifier for this declaration (max 255 printable chars with no spaces, quotation marks, angle brackets, nor backslashes)",
        "type": "string",
        "minLength": 1,
        "format": "f5long-id"
    },
    "label": {
        "title": "Label",
        "description": "Optional friendly name for this declaration",
        "type": "string",
        "format": "f5label"
    },
    "remark": {
        "title": "Remark",
        "description": "Arbitrary (brief) text pertaining to this declaration (optional)",
        "type": "string",
        "format": "f5remark"
    },
    "constants": {
        "title": "Constants",
        "description": "Declaration metadata and/or named values for (re-)use by declaration objects",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Constants",
                "default": "Constants"
            },

            "version": {
                "title": "Declaration version",
                "description": "Version number of declaration; update when you change contents but not ID (optional but recommended)",
                "type": [ "number", "string" ]
            },
            "timestamp": {
                "title": "Declaration timestamp",
                "description": "Date+time (this version of) declaration was created (optional but recommended)",
                "type": "string",
                "format": "date-time"
            }
        },
        "additionalProperties": {
            "type": [
                "boolean", "integer", "number",
                "string", "array", "object"
            ],

            "if": {
                "type": "object",
                "required": [ "protected", "ciphertext" ]
            },
            "then": {
                "properties": {
                    "allowReuse": {
                        "title": "Allow reuse",
                        "description": "If true (default), cryptogram may be reused by different declaration objects, WHICH MAY POSE A SECURITY RISK!",
                        "type": "boolean",
                        "default": true
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/JWE" }
            }
        },
        "propertyNames": { "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$" }
    },

    "Common": {
        "title": "Common tenant",
        "description": "Special tenant Common holds objects other tenants can share",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Tenant",
                "default": "Tenant"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": {"$ref": "#/definitions/Remark" },
            "verifiers": {
                "title": "Verifiers",
                "description": "Data (in 'key':'value' properties) used to verify automated tests.  Ordinary declarations do not need this",
                "type": "object"
            },

            "enable": {
                "title": "Enable",
                "description": "If declared, Common tenant must be enabled",
                "type": "boolean",
                "const": true
            },
            "Shared": { "$ref": "#/definitions/Application_Shared" },

            "constants": { "$ref": "#/definitions/Constants" },
            "controls": { "$ref": "#/definitions/Controls" }
        },
        "additionalProperties": false
    },

    "controls": {
        "title": "Controls",
        "description": "Options to control configuration process",
        "type": "object",

        "$comment": "archiveId and archiveTimestamp reserved for future use.",
        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Controls",
                "default": "Controls"
            },
            "logLevel": {
                "title": "Log level",
                "description": "Controls the amount of detail in logs produced by the configuration process using RFC 5424 severity levels (default is 'error').  May be overridden on a per-Tenant basis",
                "type": "string",
                "enum": [
                    "emergency", "alert", "critical", "error",
                    "warning", "notice", "info", "debug"
                ],
                "default": "error"
            },
            "trace": {
                "title": "Trace",
                "description": "If true, a detailed trace of the configuration process will be created for subsequent analysis (default false).  May be overridden on a per-Tenant basis.  Warning:  trace files may contain sensitive configuration data",
                "type": "boolean",
                "default": false
            },
            "archiveId": {
                "title": "Archive ID",
                "description": "Read-only property present when you GET a declaration from configuration system.  Archived versions of declaration are identified by a combination of 'id' and 'archiveId'",
                "type": [ "number", "string" ],
                "readOnly": true
            },
            "archiveTimestamp": {
                "title": "Archive timestamp",
                "description": "Read-only property present when you GET a declaration from configuration system.  Indicates when this version (see archiveId) of declaration was archived",
                "type": "string",
                "format": "date-time",
                "readOnly": true
            }
        }
    },

    "scratch": {
        "title": "f5 scratch",
        "description": "Holds some system data during declaration processing",
        "type": "string",
        "readOnly": true
    }
 },

 "additionalProperties": { "$ref": "#/definitions/Tenant" },
 "propertyNames": { "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$" },
 "required": [ "class", "schemaVersion", "id" ],

 "definitions": {

    "Tenant": {
        "title": "Tenant",
        "description": "Declares a Tenant",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Tenant"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": {"$ref": "#/definitions/Remark" },
            "verifiers": {
                "title": "Verifiers",
                "description": "Data (in 'key':'value' properties) used to verify automated tests.  Ordinary declarations do not need this",
                "type": "object"
            },

            "enable": {
                "title": "Enable",
                "description": "Tenant handles traffic only when enabled (default)",
                "type": "boolean",
                "default": true
            },
            "defaultRouteDomain": {
                "title": "Default route domain",
                "description": "Selects the default route domain for IP traffic to and from this Tenant's application resources (note: affects declared IP addresses which do not include a %RD route-domain specifier).  You must choose an existing route domain--this option cannot create one.  Route domain 0 (default) is always available",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535,
                "default": 0,
                "f5bigComponent": "query net route-domain"
            },
            "Shared": { "$ref": "#/definitions/Application_Shared" },

            "constants": { "$ref": "#/definitions/Constants" },
            "controls": { "$ref": "#/definitions/Controls" }
        },

        "additionalProperties": { "$ref": "#/definitions/Application" },
        "propertyNames": { "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$" },
        "required": [ "class" ]
    },


    "Application_Shared": {
        "title": "Shared Application",
        "description": "Special application Shared holds objects other applications can share",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Application"
            },
            "template": {
                "title": "Template Name",
                "description": "Shared Application template is always generic",
                "type": "string",
                "const": "shared"
            },
            "enable": {
                "title": "Enable",
                "description": "If declared, Shared Application must be enabled",
                "type": "boolean",
                "const": true,
                "default": true
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Application" },

        "required": [ "class", "template" ]
    },


    "Application": {
        "title": "Application",
        "description": "Application declaration master schema",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Application"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": {"$ref": "#/definitions/Remark" },

            "template": {
                "title": "Template Name",
                "description": "Each application type has certain required and default elements and selects appropriate setup of various ADC/Security features",
                "type": "string"
            },
            "enable": {
                "title": "Enable",
                "description": "Application handles traffic only when enabled (default)",
                "type": "boolean",
                "default": true
            },
            "constants": { "$ref": "#/definitions/Constants" },
            "serviceMain": true,
            "redirect80": true
        },

        "additionalProperties": {
            "$comment": "To avert double validation here (with double side-effects), properties named in application-type schemas must be stubbed ('ppty': true) in the 'properties' section just above.",

            "properties": {
                "class": {
                    "title": "Class",
                    "type": "string",
                    "enum": [
                        "Service_HTTPS",
                        "Service_HTTP",
                        "Service_TCP",
                        "Service_UDP",
                        "Service_L4",
                        "Pool",
                        "Monitor",
                        "Persist",
                        "iRule",
                        "SNAT_Pool",
                        "TLS_Server",
                        "TLS_Client",
                        "Certificate",
                        "CA_Bundle",
                        "HTTP_Profile",
                        "HTTP_Compress",
                        "TCP_Profile",
                        "UDP_Profile",
                        "L4_Profile"
                    ]
                }
            },

 "if": { "properties": { "class": { "const": "Service_HTTP" } } },
 "then": { "$ref": "#/definitions/Service_HTTP" },
 "else": {
    "$comment": "We use if/then/else rather than anyOf to make 'default'-filling unambiguous.",
  "if": { "properties": { "class": { "const": "Service_HTTPS" } } },
  "then": { "$ref": "#/definitions/Service_HTTPS" },
  "else": {
   "if": { "properties": { "class": { "const": "Service_TCP" } } },
   "then": { "$ref": "#/definitions/Service_TCP" },
   "else": {
    "if": { "properties": { "class": { "const": "Service_UDP" } } },
    "then": { "$ref": "#/definitions/Service_UDP" },
    "else": {
     "if": { "properties": { "class": { "const": "Pool" } } },
     "then": { "$ref": "#/definitions/Pool" },
     "else": {
      "if": { "properties": { "class": { "const": "Monitor" } } },
      "then": { "$ref": "#/definitions/Monitor" },
      "else": {
       "if": { "properties": { "class": { "const": "Persist" } } },
       "then": { "$ref": "#/definitions/Persist" },
       "else": {
        "if": { "properties": { "class": { "const": "iRule" } } },
        "then": { "$ref": "#/definitions/iRule" },
        "else": {
         "if": { "properties": { "class": { "const": "SNAT_Pool" } } },
         "then": { "$ref": "#/definitions/SNAT_Pool" },
         "else": {
          "if": { "properties": { "class": { "const": "TLS_Server" } } },
          "then": { "$ref": "#/definitions/TLS_Server" },
          "else": {
           "if": { "properties": { "class": { "const": "TLS_Client" } } },
           "then": { "$ref": "#/definitions/TLS_Client" },
           "else": {
            "if": { "properties": { "class": { "const": "Certificate" } } },
            "then": { "$ref": "#/definitions/Certificate" },
            "else": {
             "if": { "properties": { "class": { "const": "CA_Bundle" } } },
             "then": { "$ref": "#/definitions/CA_Bundle" },
             "else": {
              "if": { "properties": { "class": { "const": "HTTP_Profile" } } },
              "then": { "$ref": "#/definitions/HTTP_Profile" },
              "else": {
               "if": { "properties": { "class": { "const": "HTTP_Compress" } } },
               "then": { "$ref": "#/definitions/HTTP_Compress" },
               "else": {
                "if": { "properties": { "class": { "const": "TCP_Profile" } } },
                "then": { "$ref": "#/definitions/TCP_Profile" },
                "else": {
                 "if": { "properties": { "class": { "const": "UDP_Profile" } } },
                 "then": { "$ref": "#/definitions/UDP_Profile" },
                 "else": {
                  "if": { "properties": { "class": { "const": "L4_Profile" } } },
                  "then": { "$ref": "#/definitions/L4_Profile" },
                  "else": {
                   "if": { "properties": { "class": { "const": "Service_L4" } } },
                   "then": { "$ref": "#/definitions/Service_L4" },
                   "else": {
                    "$comment": "Unrecognized 'class'.",
                    "not": {}
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
        },
        "propertyNames": { "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$" },

        "if": { "properties": { "template": { "const": "https" } } },
        "then": { "$ref": "#/definitions/Template_https" },
        "else": {
         "if": { "properties": { "template": { "const": "http" } } },
         "then": { "$ref": "#/definitions/Template_http" },
         "else": {
          "if": { "properties": { "template": { "const": "tcp" } } },
          "then": { "$ref": "#/definitions/Template_tcp" },
          "else": {
           "if": { "properties": { "template": { "const": "udp" } } },
           "then": { "$ref": "#/definitions/Template_udp" },
           "else": {
             "if": { "properties": { "template": { "const": "l4" } } },
             "then": { "$ref": "#/definitions/Template_l4" },
             "else": {
              "$ref": "#/definitions/Template_generic"
            }
           }
          }
         }
        },
        "required": [ "class", "template" ]
    },


    "Template_https": {
        "title": "HTTPS application",
        "description": "Declares an HTTPS application",
        "properties": {
            "serviceMain": { "$ref": "#/definitions/Service_HTTPS" }
        },
        "required": [ "serviceMain" ]
    },


    "Template_http": {
        "title": "HTTP application",
        "description": "Declares an HTTP application",
        "properties": {
            "serviceMain": { "$ref": "#/definitions/Service_HTTP" }
        },
        "required": [ "serviceMain" ]
    },


    "Template_tcp": {
        "title": "TCP application",
        "description": "Declares a TCP application",
        "properties": {
            "serviceMain": { "$ref": "#/definitions/Service_TCP" }
        },
        "required": [ "serviceMain" ]
    },


    "Template_udp": {
        "title": "UDP application",
        "description": "Declares a UDP application",
        "properties": {
            "serviceMain": { "$ref": "#/definitions/Service_UDP" }
        },
        "required": [ "serviceMain" ]
    },


    "Template_l4": {
        "title": "L4 application",
        "description": "Declares a L4 application",
        "properties": {
            "serviceMain": { "$ref": "#/definitions/Service_L4" }
        },
        "required": [ "serviceMain" ]
    },


    "Template_generic": {
        "title": "Generic application",
        "description": "Declares a generic application",
        "properties": {
            "template": {
                "title": "Template Name",
                "description": "In addition to 'generic' and 'shared' other values may appear here for extensibility",
                "type": "string"
            }
        }
    },


    "Service_HTTP": {
        "title": "HTTP virtual server",
        "description": "HTTP virtual server",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Service_HTTP"
            },
            "virtualPort": {
                "title": "Virtual server TCP port",
                "description": "Default 80 is well-known HTTP port",
                "type": "integer",
                "default": 80
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_HTTP_Core" },

        "dependencies": {
            "serverTLS": { "not": {} },
            "clientTLS": { "not": {} }
        },
        "required": [ "class" ]
    },


    "Service_HTTPS": {
        "title": "HTTPS virtual server",
        "description": "HTTPS (HTTP+TLS) virtual server",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Service_HTTPS"
            },
            "virtualPort": {
                "title": "Virtual server TCP port",
                "description": "Default 443 is well-known HTTPS port",
                "type": "integer",
                "default": 443
            },
            "redirect80": {
                "title": "Redirect HTTP",
                "description": "If true, HTTP traffic to any virtualAddress on port 80 will be redirected to virtualPort",
                "type": "boolean",
                "default": true
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_HTTP_Core" },

        "dependencies": {
            "serverTLS": {
                "properties": { "serverTLS": { "minLength": 1 } }
            }
        },
        "required": [ "class", "serverTLS" ]
    },


    "Service_HTTP_Core": {
        "title": "HTTP VS core",
        "description": "Core attributes of HTTP(S) virtual server",

        "properties": {
            "persistenceMethods": {
                "title": "Persistence methods",
                "description": "Default 'cookie' is generally good",
                "type": "array",
                "default": [ "cookie" ]
            },
            "profileHTTP": {
                "title": "HTTP profile",
                "description": "HTTP profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "basic" ],
                    "default": "basic"
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to HTTP profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "HTTP_Profile" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP HTTP profile",
                            "description": "Pathname of existing BIG-IP HTTP profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1,
                    "f5bigComponent": "query ltm profile http"
                }
            },
            "profileHTTPCompression": {
                "title": "HTTP compression profile",
                "description": "HTTP compression profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "basic", "wan" ]
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to HTTP compression profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "HTTP_Compress" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP HTTP compression profile",
                            "description": "Pathname of existing BIG-IP HTTP compression profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1,
                    "f5bigComponent": "query ltm profile http-compression"
                }
            },
            "profileHTTPAcceleration": {
                "title": "Web acceleration profile",
                "description": "Web acceleration profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "basic" ]
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP web acceleration profile",
                            "description": "Pathname of existing BIG-IP HTTP compression profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1,
                    "f5bigComponent": "query ltm profile web-acceleration"
                }
            },
            "profileMultiplex": {
                "title": "Multiplex profile",
                "description": "Multiplex (OneConnect) profile; name of built-in or else AS3 pointer",
                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "basic" ]
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP OneConnect profile",
                            "description": "Pathname of existing BIG-IP OneConnect profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1,
                    "f5bigComponent": "query ltm profile one-connect"
                }
            },
            "policyWAF": {
                "title": "WAF policy",
                "description": "AS3 pointer to WAF (ASM) policy declaration",

                "type": "object",
                "properties": {
                    "bigip": {
                        "title": "BIG-IP WAF policy",
                        "description": "Pathname of existing BIG-IP WAF (ASM) policy",
                        "type": "string",
                        "format": "f5bigip"
                    }
                },
                "required": [ "bigip" ],
                "f5bigComponent": "asm policy"
            },
            "policyIAM": {
                "title": "IAM policy",
                "description": "AS3 pointer to IAM (APM) policy declaration",

                "type": "object",
                "properties": {
                    "bigip": {
                        "title": "BIG-IP IAM policy",
                        "description": "Pathname of existing BIG-IP IAM (APM) policy",
                        "type": "string",
                        "format": "f5bigip"
                    }
                },
                "required": [ "bigip" ],
                "f5bigComponent": "query apm profile access"
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_TCP_Core" },
        "required": [ "class" ]
    },


    "Service_TCP": {
        "title": "TCP virtual server",
        "description": "Declares a TCP virtual server (w/optional TLS)",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Service_TCP"
            },
            "persistenceMethods": {
                "title": "Persistence methods",
                "description": "Default 'source-address' is generally good",
                "type": "array",
                "default": [ "source-address" ]
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_TCP_Core" },
        "required": [ "class" ]
    },


    "Service_TCP_Core": {
        "title": "Service_TCP core",
        "description": "Core attributes of TCP virtual server",
        "type": "object",

        "properties": {
            "virtualPort": {
                "title": "virtual server TCP port",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
            },
            "layer4": {
                "title": "L4 protocol",
                "description": "For TCP virtual server, Layer 4 protocol must be TCP",
                "type": "string",
                "const": "tcp",
                "default": "tcp"
            },
            "profileTCP": {
                "title": "TCP profile",
                "description": "TCP profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "normal", "lan", "wan", "mobile" ],
                    "default": "normal"
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to TCP profile declaration for ingress and egress",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "TCP_Profile" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP TCP profile",
                            "description": "Pathname of existing BIG-IP TCP profile for both ingress and egress",
                            "type": "string",
                            "format": "f5bigip"
                        },
                        "ingress": {
                            "title": "Ingress profile",
                            "description": "Ingress (client-side context) TCP profile",
                            "if": { "not": { "type": "object" } },
                            "then": {
                                "type": "string",
                                "enum": [ "normal", "lan", "wan", "mobile" ],
                                "default": "normal"
                            },
                            "else": {
                                "type": "object",
                                "properties": {
                                    "use": {
                                        "title": "Use",
                                        "description": "AS3 pointer to TCP profile declaration for incoming connections",
                                        "type": "string",
                                        "minLength": 1,
                                        "f5pointsTo": {
                                            "properties": {
                                                "class": { "const": "TCP_Profile" }
                                            },
                                            "required": [ "class" ]
                                        }
                                    },
                                    "bigip": {
                                        "title": "BIG-IP TCP profile",
                                        "description": "Pathname of existing BIG-IP TCP profile in client-side context",
                                        "type": "string",
                                        "format": "f5bigip"
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1,
                                "maxProperties": 1
                            }
                        },
                        "egress": {
                            "title": "Egress TCP profile",
                            "description": "Egress (server-side context) TCP profile",
                            "if": { "not": { "type": "object" } },
                            "then": {
                                "type": "string",
                                "enum": [ "normal", "lan", "wan", "mobile" ],
                                "default": "normal"
                            },
                            "else": {
                                "type": "object",
                                "properties": {
                                    "use": {
                                        "title": "Use",
                                        "description": "AS3 pointer to TCP profile declaration for outgoing connections",
                                        "type": "string",
                                        "minLength": 1,
                                        "f5pointsTo": {
                                            "properties": {
                                                "class": { "const": "TCP_Profile" }
                                            },
                                            "required": [ "class" ]
                                        }
                                    },
                                    "bigip": {
                                        "title": "BIG-IP server-side TCP profile",
                                        "description": "Pathname of existing BIG-IP TCP profile in server-side context",
                                        "type": "string",
                                        "format": "f5bigip"
                                    }
                                },
                                "additionalProperties": false,
                                "minProperties": 1,
                                "maxProperties": 1
                            }
                        }
                    },
                    "additionalProperties": false,
                    "dependencies": {
                        "use":     { "minProperties": 1, "maxProperties": 1 },
                        "bigip":   { "minProperties": 1, "maxProperties": 1 },
                        "ingress": { "minProperties": 2, "maxProperties": 2 },
                        "egress":  { "minProperties": 2, "maxProperties": 2 }
                    },
                    "f5bigComponent": "query ltm profile tcp"
                }
            },
            "serverTLS": {
                "title": "TLS server",
                "description": "AS3 pointer to TLS Server declaration",

                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "TLS_Server" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP client SSL profile",
                            "description": "Pathname of existing BIG-IP Client SSL profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm profile client-ssl"
                }
            },
            "clientTLS": {
                "title": "TLS client",
                "description": "AS3 pointer to TLS Client declaration",

                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "TLS_Client" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP server SSL profile",
                            "description": "Pathname of existing BIG-IP Server SSL profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm profile server-ssl"
                }
            },
            "policyEndpoint": {
                "title": "Endpoint policy",
                "description": "AS3 pointer to Endpoint policy declaration",
                "type": "object",
                "properties": {
                    "bigip": {
                        "title": "BIG-IP Endpoint policy",
                        "description": "Pathname of existing BIG-IP LTM policy",
                        "type": "string",
                        "format": "f5bigip"
                    }
                },
                "required": [ "bigip" ],
                "f5bigComponent": "query ltm policy"
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_Core" },
        "required": [ "virtualPort" ]
    },


    "Service_UDP": {
        "title": "UDP virtual server",
        "description": "Declares a UDP virtual server (w/optional (D)TLS)",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Service_UDP"
            },

            "persistenceMethods": {
                "title": "Persistence methods",
                "description": "Default 'source-address' is generally good",
                "type": "array",
                "default": [ "source-address" ]
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_UDP_Core" },
        "required": [ "class" ]
    },


    "Service_UDP_Core": {
        "title": "Service_UDP core",
        "description": "Core attributes of UDP virtual server",
        "type": "object",

        "properties": {
            "virtualPort": {
                "title": "Virtual server UDP port",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
            },
            "layer4": {
                "title": "L4 protocol",
                "description": "For UDP virtual server, Layer 4 protocol must be UDP",
                "type": "string",
                "const": "udp",
                "default": "udp"
            },
            "profileUDP": {
                "title": "UDP profile",
                "description": "UDP profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "normal" ],
                    "default": "normal"
                },
                "else": {
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to UDP profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "UDP_Profile" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP UDP profile",
                            "description": "Pathname of existing BIG-IP UDP profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minProperties": 1,
                    "maxProperties": 1,
                    "f5bigComponent": "query ltm profile udp"
                }
            },
            "serverTLS": {
                "title": "TLS server",
                "description": "AS3 pointer to TLS Server declaration",

                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "TLS_Server" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP client SSL profile",
                            "description": "Pathname of existing BIG-IP Client SSL profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm profile client-ssl"
                }
            },
            "clientTLS": {
                "title": "TLS client",
                "description": "AS3 pointer to TLS Client declaration",
                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "TLS_Client" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP server SSL profile",
                            "description": "Pathname of existing BIG-IP Server SSL profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm profile server-ssl"
                }
            },
            "policyEndpoint": {
                "title": "Endpoint policy",
                "description": "AS3 pointer to Endpoint policy declaration",
                "type": "object",
                "properties": {
                    "bigip": {
                        "title": "BIG-IP Endpoint policy",
                        "description": "Pathname of existing BIG-IP LTM policy",
                        "type": "string",
                        "format": "f5bigip"
                    }
                },
                "required": [ "bigip" ],
                "f5bigComponent": "query ltm policy"
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_Core" },
        "required": [ "virtualPort" ]
    },


    "Service_L4": {
        "title": "L4 virtual server",
        "description": "Declares a L4 (FastL4) virtual server",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Service_L4"
            },

            "persistenceMethods": {
                "title": "Persistence methods",
                "description": "Default 'source-address' is generally good",
                "type": "array",
                "default": [ "source-address" ]
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_L4_Core" },
        "required": [ "class" ]
    },


    "Service_L4_Core": {
        "title": "Service_L4 core",
        "description": "Core attributes of L4 virtual server",
        "type": "object",

        "properties": {
            "virtualPort": {
                "title": "virtual server TCP port",
                "type": "integer",
                "minimum": 0,
                "maximum": 65535
            },
            "layer4": {
                "title": "L4 protocol",
                "description": "The L4 protocol type for this virtual server",
                "type": "string",
                "enum": ["any","tcp","udp","3pc","a/n","ah","argus","aris","ax.25",
                         "bbn-rcc","bna","br-sat-mon","cbt","cftp","chaos","compaq-peer","cphb","cpnx",
                         "crdup","crtp","dccp","dcn","ddp","ddx","dgp","dsr","egp",
                         "eigrp","emcon","encap","esp","etherip","fc","fire","ggp","gmtp",
                         "gre","hip","hmp","hopopt","i-nlsp","iatp","icmp","idpr","idpr-cmtp",
                         "idrp","ifmp","igmp","igp","il","ip","ipcomp","ipcv","ipencap",
                         "ipip","iplt","ippc","ipv6","ipv6-auth","ipv6-crypt","ipv6-frag","ipv6-icmp","ipv6-nonxt",
                         "ipv6-opts","ipv6-route","ipx-in-ip","irtp","isis","iso-ip","iso-tp4","kryptolan","l2tp",
                         "larp","leaf-1","leaf-2","manet","merit-inp","mfe-nsp","micp","mobile","mpls-in-ip",
                         "mtp","mux","narp","netblt","nsfnet-igp","nvp","ospf","pgm","pim",
                         "pipe","pnni","prm","ptp","pup","pvp","qnx","rdp","rsvp",
                         "rsvp-e2e-ignore","rvd","sat-expak","sat-mon","scc-sp","scps","sctp","sdrp","secure-vmtp",
                         "shim6","skip","sm","smp","snp","sprite-rpc","sps","srp","sscopmce",
                         "st","stp","sun-nd","swipe","tcf","tlsp","tp++","trunk-1","trunk-2",
                         "ttp","udplite","uti","vines","visa","vmtp","vrrp","wb-expak","wb-mon",
                         "wesp", "wsn", "xnet", "xns-idp", "xtp"],
                "default": "tcp"
            },
            "profileL4": {
                "title": "L4 profile",
                "description": "L4 profile; name of built-in or else AS3 pointer",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "basic" ],
                    "default": "basic"
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to L4 profile declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "L4_Profile" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP FastL4 profile",
                            "description": "Pathname of existing BIG-IP FastL4 profile",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "dependencies": {
                        "use":     { "minProperties": 1, "maxProperties": 1 },
                        "bigip":   { "minProperties": 1, "maxProperties": 1 }
                    },
                    "f5bigComponent": "query ltm profile fastl4"
                }
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Service_Core" },
        "required": [ "virtualPort" ]
    },

    "Service_Core": {
        "title": "Virtual-server core",
        "description": "Core attributes of a virtual server",
        "type": "object",

        "properties": {
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "virtualAddresses": {
                "title": "Virtual addresses",
                "description": "Virtual server will listen to each IP address in list.  To accept connections only from certain subnet(s), replace IP address with array [IP-address, accept-from-subnet]",
                "type": "array",
                "items": {
                    "if": { "type": "string" },
                    "then": { "format": "f5ip" },
                    "else": {
                        "type": "array",
                        "items": {
                            "title": "Virtual address",
                            "type": "string",
                            "format": "f5ip"
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "uniqueItems": true
                    }
                },
                "minItems": 1,
                "uniqueItems": true
            },

            "enable": {
                "title": "Enable",
                "description": "Virtual server handles traffic only when enabled (default)",
                "type": "boolean",
                "default": true
            },
            "maxConnections": {
                "title": "Maximum connections",
                "type": "integer",
                "minimum": 0,
                "default": 0
            },
            "snat": {
                "title": "SNAT",
                "description": "Name of built-in SNAT method or AS3 pointer to SNAT pool. If 'self' virtual-server address will be used as SNAT address",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "none", "self", "auto" ],
                    "default": "auto"
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "definition": "AS3 pointer to SNAT pool declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "SNAT_Pool" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP SNAT pool",
                            "description": "Pathname of existing BIG-IP SNAT pool",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minimumProperties": 1,
                    "maximumProperties": 1,
                    "f5bigComponent": "query ltm snatpool"
                }
            },
            "iRules": {
                "title": "iRules",
                "description": "List iRules for this virtual server (order is significant)",
                "type": "array",
                "items": {
                    "title": "iRule",
                    "description": "AS3 pointer to iRule (declared separately)",
                    "if": { "type": "string" },
                    "then": {
                        "minLength": 1,
                        "f5pointsTo": {
                            "properties": {
                                "class": { "const": "iRule" }
                            },
                            "required": [ "class" ]
                        }
                    },
                    "else": {
                        "type": "object",
                        "properties": {
                            "bigip": {
                                "title": "BIG-IP iRule",
                                "description": "Pathname of existing BIG-IP iRule",
                                "type": "string",
                                "format": "f5bigip"
                            }
                        },
                        "required": [ "bigip" ],
                        "f5bigComponent": "query ltm rule"
                    }
                },
                "minItems": 1,
                "$comment": "uniqueItems: true"
            },
            "pool": {
                "title": "Pool",
                "description": "AS3 pointer to pool if any (declared separately)",
                "if": { "type": "string" },
                "then": {
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "Pool" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP pool",
                            "description": "Pathname of existing BIG-IP pool",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm pool"
                }
            },
            "addressStatus": {
                "title": "Address status",
                "type": "boolean",
                "default": true
            },
            "mirroring": {
                "title": "Mirroring",
                "description": "Controls connection-mirroring for high-availability",
                "type": "string",
                "enum": [ "none", "L4" ],
                "default": "none"
            },

            "policyFirewallEnforced": {
                "$ref": "#/definitions/Config_Ref"
            },
            "policyFirewallStaged": {
                "$ref": "#/definitions/Config_Ref"
            },

            "lastHop": {
                "title": "Last hop",
                "description": "Name of built-in last-hop method or AS3 pointer to last-hop pool (default 'default' means use system setting)",

                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "default", "auto", "disable" ],
                    "default": "default"
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "use": {
                            "title": "Use",
                            "definition": "AS3 pointer to last-hop pool declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "Pool" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP last-hop pool",
                            "description": "Pathname of existing BIG-IP pool",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minimumProperties": 1,
                    "maximumProperties": 1,
                    "f5bigComponent": "query ltm pool"
                }
            },

            "translateClientPort": {
                "title": "Translate client port",
                "description": "If true, hide client's port number from server (default false)",
                "type": "boolean",
                "default": false
            },
            "translateServerAddress": {
                "title": "Translate server address",
                "description": "If true (default), make server-side connection to server address (otherwise, treat server as gateway to virtual-server address)",
                "type": "boolean",
                "default": true
            },
            "translateServerPort": {
                "title": "Translate server port",
                "description": "If true (default), make server-side connection to server port (otherwise, connect to server on virtual-server port)",
                "type": "boolean",
                "default": true
            },

            "persistenceMethods": {
                "title": "Persistence method(s)",
                "description": "List of persistence methods (each by name or AS3 pointer).  Element 0 is primary (default) persistence method",
                "type": "array",
                "items": { "$ref": "#/definitions/Basic_Persist" },
                "minItems": 0,
                "$comment": "uniqueItems: true"
            },
            "fallbackPersistenceMethod": { "$ref": "#/definitions/Basic_Persist" }
        },

        "dependencies": {
            "fallbackPersistenceMethod": [ "persistenceMethods" ]
        },
        "required": [ "virtualAddresses" ]
    },


    "SNAT_Pool": {
        "title": "SNAT pool",
        "description": "Declares a list of SNAT addresses",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "SNAT_Pool"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "snatAddresses": {
                "title": "SNAT addresses",
                "description": "List of SNAT addresses-- may include both IPv4 and IPv6",
                "type": "array",
                "items": {
                    "title": "SNAT address",
                    "type": "string",
                    "format": "f5ip"
                },
                "minItems": 1,
                "uniqueItems": true
            }
        },
        "additionalProperties": false,
        "required": [ "class", "snatAddresses" ]
    },


    "iRule": {
        "title": "iRule",
        "description": "An iRule",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "iRule"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "expand": {
                "title": "Expand",
                "description": "If true (default), expand backquoted variables in iRule",
                "type": "boolean",
                "default": true
            },
            "iRule": {
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "string",
                "f5expand": { "when": "1/expand" }
            }
        },
        "additionalProperties": false,
        "required": [ "class", "iRule" ]
    },


    "Basic_Persist": {
        "title": "Basic Persist",
        "description": "Holds name of simple persistence method or AS3 pointer to persistence method",

        "if": { "type": "string" },
        "then": {
            "enum": [
                "cookie",
                "destination-address",
                "msrdp",
                "source-address",
                "tls-session-id"
            ]
        },
        "else": {
            "type": "object",
            "properties": {
                "use": {
                    "title": "Use",
                    "description": "AS3 pointer to persistence method declaration",
                    "type": "string",
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "Persist" }
                        },
                        "required": [ "class" ]
                    }
                },
                "bigip": {
                    "title": "BIG-IP persistence profile",
                    "description": "Pathname of existing BIG-IP persistence profile",
                    "type": "string",
                    "format": "f5bigip"
                }
            },
            "additionalProperties": false,
            "minimumProperties": 1,
            "maximumProperties": 1,
            "f5bigComponent": "probe ltm persistence dest-addr"
        }
    },

    "Persist": {
        "title": "Persistence method",
        "description": "Declares a persistence method",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Persist"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "persistenceMethod": {
                "title": "Persistence method",
                "description": "Each basic persistence method may be customized",
                "type": "string",
                "enum": [
                    "cookie",
                    "destination-address",
                    "hash",
                    "msrdp",
                    "sip-info",
                    "source-address",
                    "tls-session-id",
                    "universal"
                ]
            },
            "matchAcrossPools": {
                "title": "Match across pools",
                "type": "boolean",
                "default": false
            },
            "matchAcrossVirtualPorts": {
                "title": "Match across virtual ports",
                "type": "boolean",
                "default": false
            },
            "matchAcrossVirtualAddresses": {
                "title": "Match across virtual addresses",
                "type": "boolean",
                "default": false
            },
            "mirror": {
                "title": "Mirror",
                "description": "If true, try to maintain persistence even after HA failover of ADC (default false)",
                "type": "boolean",
                "default": false
            },
            "overrideConnectionLimit": {
                "title": "Override connection limit",
                "description": "If true, do not enforce pool member connection limit for persisted connections (default false)",
                "type": "boolean",
                "default": false
            }
        },

 "if": { "properties": { "persistenceMethod": { "const": "cookie" } } },
 "then": { "$ref": "#/definitions/Persist_Cookie" },
 "else": {
  "if": {
    "properties": {
        "persistenceMethod": { "enum": [ "destination-address", "source-address" ] }
    }
  },
  "then": { "$ref": "#/definitions/Persist_Addr" },
  "else": {
   "if": { "properties": { "persistenceMethod": { "const": "hash" } } },
   "then": { "$ref": "#/definitions/Persist_Hash" },
   "else": {
    "if": { "properties": { "persistenceMethod": { "const": "msrdp" } } },
    "then": { "$ref": "#/definitions/Persist_MSRDP" },
    "else": {
     "if": { "properties": { "persistenceMethod": { "const": "sip-info" } } },
     "then": { "$ref": "#/definitions/Persist_SIP" },
     "else": {
      "if": { "properties": { "persistenceMethod": { "const": "tls-session-id" } } },
      "then": { "$ref": "#/definitions/Persist_TLS_Session" },
      "else": {
       "if": { "properties": { "persistenceMethod": { "const": "universal" } } },
       "then": { "$ref": "#/definitions/Persist_UIE" },
       "else": {
        "$comment": "Unrecognized persistenceMethod.",
        "not": {}
       }
      }
     }
    }
   }
  }
 },

        "dependencies": {
            "use": { "not": {} },
            "bigip": { "not": {} }
        },
        "required": [ "class", "persistenceMethod" ]
    },

    "Persist_Addr": {
        "title": "Address persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 180)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 180
            },
            "hashAlgorithm": {
                "title": "Hash algorithm",
                "type": "string",
                "enum": [ "carp", "default" ],
                "default": "default"
            },
            "addressMask": {
                "title": "Address mask",
                "description": "Optional mask selects portion of address used by simple persistence (if omitted all address bits are used)",
                "type": "string",
                "format": "f5ip"
            }
        }
    },

    "Persist_Cookie": {
        "title": "Cookie persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 0 means indefinite)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 0
            },
            "cookieMethod": {
                "title": "Method",
                "description": "Selects cookie processing method (default is insert)",
                "type": "string",
                "enum": [ "insert", "hash", "passive", "rewrite" ],
                "default": "insert"
            },
            "cookieName": {
                "title": "Cookie name",
                "description": "Cookie name (for method 'insert', default (empty-string) yields system-generated name)",
                "type": "string",
                "pattern": "^[0-9A-Za-z.~#$%^&*_-]{0,64}$",
                "default": ""
            }
        },

        "if": { "properties": { "cookieMethod": { "const": "insert" } } },
        "then": {
            "properties": {
                "ttl": {
                    "title": "TTL",
                    "description": "Requested cookie lifetime (seconds, default 0 means session cookie)",
                    "type": "integer",
                    "minimum": 0, "maximum": 604800, "default": 0
                },
                "httpOnly": {
                    "title": "HTTP only flag",
                    "description": "If true (default) HTTPOnly flag will be set",
                    "type": "boolean",
                    "default": true
                },
                "secure": {
                    "title": "Secure flag",
                    "description": "If true (default) Secure (TLS) flag will be set",
                    "type": "boolean",
                    "default": true
                },
                "alwaysSet": {
                    "title": "Always set",
                    "description": "If true, set cookie with every HTTP response (default false)",
                    "type": "boolean",
                    "default": false
                },
                "encrypt": {
                    "title": "Encrypt cookie",
                    "description": "If true, prevent disclosure of (or tampering with) ADC info in cookie (default false, to reduce latency)",
                    "type": "boolean",
                    "default": false
                },
                "passphrase": {
                    "title": "Passphrase",
                    "description": "Used to create secret key for cookie encryption",
                    "type": "object",
                    "properties": {
                        "allowReuse": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    "if": true,
                    "then": { "$ref": "#/definitions/Secret" },
                    "f5fetch": "object",
                    "f5secret": true
                }
            },
            "if": { "properties": { "encrypt": { "const": true } } },
            "then": { "required": [ "passphrase" ] }
        },
        "else": {
            "if": { "properties": { "cookieMethod": { "const": "hash" } } },
            "then": {
                "properties": {
                    "cookieName": {
                        "minLength": 1
                    },
                    "startAt": {
                        "title": "Start at",
                        "description": "Index of first octet in cookie value to hash",
                        "type": "integer",
                        "minimum": 0, "maximum": 4096, "default": 0
                    },
                    "hashCount": {
                        "title": "Hash count",
                        "description": "Number of octets in cookie value to hash; 0 (default) means all",
                        "type": "integer",
                        "minimum": 0, "maximum": 4096, "default": 0
                    }
                }
            },
            "else": {
                "$comment": "No extra properties for passive or rewrite."
            }
        }
    },

    "Persist_Hash": {
        "title": "Hash persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 180)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 180
            },
            "hashAlgorithm": {
                "title": "Hash algorithm",
                "type": "string",
                "enum": [ "carp", "default" ],
                "default": "default"
            },
            "startAt": {
                "title": "Start at",
                "description": "Index of first octet in packet to hash",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 0
            },
            "count": {
                "title": "Hash count",
                "description": "Number of octets in cookie value to hash; 0 (default) means all",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 0
            },
            "startPattern": {
                "title": "Start pattern",
                "description": "Regular expression which matches start of data to hash; default \"\" averts matching",
                "type": "string",
                "default": ""
            },
            "endPattern": {
                "title": "End pattern",
                "description": "Regular expression which matches end of data to hash; default \"\" averts matching",
                "type": "string",
                "default": ""
            },
            "bufferLimit": {
                "title": "Buffer limit",
                "description": "Number of octets to buffer while pattern-matching",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 0
            },
            "iRule": {
                "title": "iRule",
                "description": "AS3 pointer to iRule if any (declared separately)",
                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "iRule" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP iRule",
                            "description": "Pathname of existing BIG-IP iRule",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm rule"
                }
            }
        }
    },

    "Persist_MSRDP": {
        "title": "MSRDP persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 300)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 300
            },
            "sessionBroker": {
                "title": "Session broker",
                "description": "If true (default), client will be persisted to server chosen by session broker",
                "type": "boolean",
                "default": true
            }
        }
    },

    "Persist_SIP": {
        "title": "SIP info persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 180)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 180
            },
            "header": {
                "title": "SIP header",
                "description": "Suggested values include: Call-ID, To, From, SIP-ETag, and Subject",
                "type": "string",
                "minLength": 1
            }
        },
        "required": [ "header" ]
    },

    "Persist_TLS_Session": {
        "title": "TLS session persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 300)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 300
            }
        }
    },

    "Persist_UIE": {
        "title": "Universal persistence",

        "properties": {
            "duration": {
                "title": "Duration",
                "description": "Lifetime of persistence record (seconds, default 180)",
                "type": "integer",
                "minimum": 0, "maximum": 604800, "default": 180
            },
            "iRule": {
                "title": "iRule",
                "description": "AS3 pointer to required iRule (declared separately)",
                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "iRule" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP iRule",
                            "description": "Pathname of existing BIG-IP iRule",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query ltm rule"
                }
            }
        },
        "required": [ "iRule" ]
    },


    "Pool": {
        "title": "pool",
        "description": "Declares a service pool",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Pool"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "loadBalancingMode": {
                "title": "LB mode",
                "description": "Load-balancing mode",
                "type": "string",
                "enum": [
                    "dynamic-ratio-member", "dynamic-ratio-node",
                    "fastest-app-response", "fastest-node",
                    "least-connections-member", "least-connections-node",
                    "least-sessions", "observed-member", "observed-node",
                    "predictive-member", "predictive-node",
                    "ratio-least-connections-member",
                    "ratio-least-connections-node",
                    "ratio-member", "ratio-node", "ratio-session",
                    "round-robin", "weighted-least-connections-member",
                    "weighted-least-connections-node"
                ],
                "default": "round-robin"
            },
            "minimumMembersActive": {
                "title": "Minimum active",
                "description": "Pool is down when fewer than this many members are up",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 1
            },
            "monitors": {
                "title": "Monitors",
                "description": "List of health monitors (each by name or AS3 pointer)",
                "type": "array",
                "items": { "$ref": "#/definitions/Basic_Monitor" },
                "minItems": 1,
                "$comment": "uniqueItems: true"
            },
            "minimumMonitors": {
                "title": "Minimum monitors",
                "description": "Member is down when fewer than minimum monitors report it healthy",
                "type": "integer",
                "minimum": 0, "maximum": 63
            },
            "members": {
                "title": "Members",
                "type": "array",
                "items": { "$ref": "#/definitions/Pool_Member" },
                "minItems": 1,
                "$comment": "uniqueItems: true",
                "f5node": true
            },
            "reselectTries": {
                "title": "Reselect tries",
                "description": "Maximum number of attempts to find a responsive member for a connection",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 0
            },
            "serviceDownAction": {
                "title": "Service-down action",
                "description": "Specifies connection handling when member is non-responsive",
                "type": "string",
                "enum": [ "drop", "none", "reselect", "reset" ],
                "default": "none"
            },
            "slowRampTime": {
                "title": "Slow ramp time",
                "description": "Connection rate to newly-active member is increased slowly during this interval (seconds)",
                "type": "integer",
                "minimum": 0, "maximum": 900, "default": 10
            }
        },
        "additionalProperties": false,

        "if": { "required": [ "monitors" ] },
        "then": { "properties": { "minimumMonitors": { "default": 1 } } },
        "required": [ "class" ]
    },


    "Pool_Member": {
        "title": "Pool member",
        "description": "Declares a service-pool member",
        "type": "object",

        "properties": {
            "remark": { "$ref": "#/definitions/Remark" },

            "servicePort": {
                "title": "Service port",
                "description": "Service L4 port (optional port-discovery may override)",
                "type": "integer",
                "minimum": 0, "maximum": 65535
            },

            "bigip": {
                "title": "BIG-IP node",
                "description": "If defined, pathname of existing BIG-IP node",
                "type": "string",
                "format": "f5bigip"
            },

            "enable": {
                "description": "Maps to BIG-IP pool member state",
                "type": "boolean",
                "default": true
            },
            "connectionLimit": {
                "title": "Connection limit",
                "description": "Maximum concurrent connections to member",
                "type": "integer",
                "minimum": 0, "maximum": 2147483647, "default": 0
            },
            "rateLimit": {
                "title": "Rate limit",
                "description": "Value zero prevents use of member",
                "type": "integer",
                "minimum": -1, "maximum": 2147483647, "default": -1
            },
            "dynamicRatio": {
                "title": "Dynamic ratio",
                "type": "integer",
                "minimum": 0, "maximum": 100, "default": 1
            },
            "ratio": {
                "title": "Ratio",
                "type": "integer",
                "minimum": 0, "maximum": 100, "default": 1
            },
            "priorityGroup": {
                "title": "Priority group",
                "type": "integer",
                "minimum": 0, "maximum": 65535, "default": 0
            },
            "monitors": {
                "title": "Monitors",
                "description": "List of monitors (each by name or AS3 pointer)",
                "type": "array",
                "items": { "$ref": "#/definitions/Basic_Monitor" },
                "minItems": 1,
                "$comment": "uniqueItems: true"
            },
            "minimumMonitors": {
                "title": "Minimum monitors",
                "description": "Member is down when fewer than minimum monitors report it healthy",
                "type": "integer",
                "minimum": 0, "maximum": 63
            }
        },
        "f5bigComponent": "query ltm node",

        "if": { "required": [ "bigip" ] },
        "then": {
            "if": { "required": [ "monitors" ] },
            "then": { "properties": { "minimumMonitors": { "default": 1 } } },
            "required": [ "servicePort" ]
        },
        "else": {
            "properties": {
                "addressDiscovery": {
                    "title": "Address discovery",
                    "description": "Selects how server (node) addresses are discovered",
                    "type": "string",
                    "enum": [ "static", "fqdn" ],
                    "default": "static"
                },
                "portDiscovery": {
                    "title": "Port discovery",
                    "description": "Selects how service ports are discovered (none=only use servicePort, permit=use servicePort if discovery fails, require=omit member if port discovery fails",
                    "type": "string",
                    "enum": [ "none", "permit", "require" ],
                    "default": "none"
                }
            },

  "if": { "properties": { "addressDiscovery": { "const": "static" } } },
  "then": {
    "properties": {
        "serverAddresses": {
            "title": "Server addresses",
            "description": "Static IP addresses of servers (nodes)",
            "type": "array",
            "items": {
                "title": "Server address",
                "type": "string",
                "format": "f5ip"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },

    "dependencies": {
        "serverAddresses": {
            "properties": { "portDiscovery": { "const": "none" } }
        }
    },

    "if": { "required": [ "monitors" ] },
    "then": { "properties": { "minimumMonitors": { "default": 1 } } },

    "required": [ "servicePort", "serverAddresses" ]
  },
  "else": {
    "properties": {
        "updateInterval": {
            "title": "Update interval",
            "description": "Server-discovery update interval (seconds)",
            "type": "integer",
            "minimum": 1,
            "maximum": 3600,
            "default": 60
        }
    },

   "if": { "properties": { "addressDiscovery": { "const": "fqdn" } } },
   "then": {
    "properties": {
        "hostname": {
            "title": "Hostname",
            "type": "string",
            "format": "hostname"
        },
        "addressFamily": {
            "title": "Address family",
            "description": "Selects IPv4/6 and DNS A/AAAA RR's",
            "type": "string",
            "enum": [ "IPv4", "IPv6" ],
            "default": "IPv4"
        },
        "autoPopulate": {
            "title": "Auto-populate",
            "description": "If true use multiple server (node) addresses when available, otherwise use only one",
            "type": "boolean",
            "default": false
        },
        "queryInterval": {
            "title": "Query interval",
            "description": "Normal DNS query interval (seconds, default 0 means RR TTL)",
            "type": "integer",
            "minimum": 0,
            "default": 0
        },
        "downInterval": {
            "title": "Down interval",
            "description": "DNS retry interval after resolution failure (seconds)",
            "type": "integer",
            "minimum": 0,
            "default": 5
        }
    },

    "dependencies": {
        "hostname": {
            "properties": { "portDiscovery": { "const": "none" } }
        }
    },

    "if": { "required": [ "monitors" ] },
    "then": { "properties": { "minimumMonitors": { "default": 1 } } },

    "required": [ "servicePort", "hostname" ]
   },
   "else": {
    "properties": {
        "tagKey": {
            "title": "Tag key",
            "type": "string",
            "minLength": 1
        },
        "tagValue": {
            "title": "Tag value",
            "type": "string",
            "minLength": 1
        },
        "addressRealm": {
            "title": "Address realm",
            "type": "string",
            "enum": [ "public", "private" ]
        }
    },

    "if": { "properties": { "addressDiscovery": { "const": "aws" } } },
    "then": {
        "properties": {
            "region": {
                "title": "AWS region",
                "description": "Empty string (default) means region in which ADC is running",
                "type": "string",
                "default": ""
            },
            "assumeRole": {
                "title": "Assume role",
                "description": "If true, assume specified role to discover server addresses (default false)",
                "type": "boolean",
                "default": false
            },
            "roleARN": {
                "title": "Role ARN",
                "type": "string",
                "minLength": 1
            },
            "externalId": {
                "title": "External ID",
                "type": "string",
                "minLength": 1
            }
        },

        "dependencies": {
            "portDiscovery": {
                "if": {
                    "not": {
                        "properties": {
                            "portDiscovery": { "const": "require" }
                        }
                    }
                },
                "then": { "required": [ "servicePort" ] }
            },
            "assumeRole": {
                "if": { "properties": { "assumeRole": { "const": true } } },
                "then": { "required": [ "roleARN", "externalId" ] }
            }
        },

        "if": { "required": [ "monitors" ] },
        "then": { "properties": { "minimumMonitors": { "default": 1 } } },

        "required": [ "tagKey", "tagValue", "addressRealm" ]
    },
    "else": {
     "if": { "properties": { "addressDiscovery": { "const": "azure" } } },
     "then": {
        "properties": {
            "resourceGroup": {
                "title": "Resource group",
                "description": "Azure Resource Group name",
                "type": "string"
            },
            "subscriptionId": {
                "title": "Subscription ID",
                "description": "Azure subscription ID",
                "type": "string"
            },
            "directoryID": {
                "title": "(Azure) Directory ID",
                "description": "Azure Active Directory ID (AKA tenant ID)",
                "type": "string"
            },
            "applicationID": {
                "title": "(Azure) Application ID",
                "description": "Azure registered application ID (AKA client ID)",
                "type": "string"
            },
            "apiAccessKey": {
                "title": "Azure API access key",
                "description": "Azure registered application API access key (AKA service principal secret)",
                "type": "object",
                "properties": {
                    "allowReuse": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Secret" },
                "f5fetch": "object",
                "f5secret": true
            }
        },

        "if": { "required": [ "monitors" ] },
        "then": { "properties": { "minimumMonitors": { "default": 1 } } },

        "dependencies": {
            "portDiscovery": {
                "if": {
                    "not": {
                        "properties": { "portDiscovery": { "const": "require" } }
                    }
                },
                "then": { "required": [ "servicePort" ] }
            }
        },
        "required": [
                "resourceGroup", "subscriptionId", "tenantId",
                "clientId", "serviceProviderSecret",
                "tagKey", "tagValue", "addressRealm"
        ]
     },
     "else": {
      "if": { "properties": { "addressDiscovery": { "const": "gce" } } },
      "then": {
        "properties": {
            "region": {
                "title": "GCE region",
                "description": "Empty string (default) means region in which ADC is running",
                "type": "string",
                "default": ""
            }
        },

        "if": { "required": [ "monitors" ] },
        "then": { "properties": { "minimumMonitors": { "default": 1 } } },

        "dependencies": {
            "portDiscovery": {
                "if": {
                    "not": {
                        "properties": { "portDiscovery": { "const": "require" } }
                    }
                },
                "then": { "required": [ "servicePort" ] }
            }
        },

        "required": [ "tagKey", "tagValue", "addressRealm" ]
      },
      "else": {
        "$comment": "Unrecognized addressDiscovery.",
        "not": {}
      }
     }
    }
   }
  },
            "not": { "required": [ "bigip" ] }
        }
    },


    "Basic_Monitor": {
        "title": "Basic Monitor",
        "description": "Holds name of simple monitor or AS3 pointer to a monitor declaration",

        "if": { "type": "string" },
        "then": {
            "enum": [
                "http", "https",
                "icmp",
                "tcp-half-open"
            ]
        },
        "else": {
            "type": "object",
            "properties": {
                "use": {
                    "title": "Use",
                    "description": "AS3 pointer to monitor declaration",
                    "type": "string",
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "Monitor" }
                        },
                        "required": [ "class" ]
                    }
                },
                "bigip": {
                    "title": "BIG-IP monitor",
                    "description": "Pathname of existing BIG-IP monitor",
                    "type": "string",
                    "format": "f5bigip"
                }
            },
            "additionalProperties": false,
            "minimumProperties": 1,
            "maximumProperties": 1,
            "f5bigComponent": "probe ltm monitor icmp"
        }
    },

    "Monitor": {
        "title": "Monitor",
        "description": "Declares a (possibly complex) monitor",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Monitor"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "monitorType": {
                "title": "Monitor type",
                "description": "Each monitor type may be customized",
                "type": "string",
                "enum": [
                    "external",
                    "http", "https",
                    "icmp",
                    "sip", "smtp",
                    "tcp", "tcp-half-open",
                    "udp"
                ]
            },
            "targetAddress": {
                "title": "Address",
                "description": "IP address monitor should probe; if empty (default) then pool member address",
                "type": "string",
                "format": "f5ip",
                "default": ""
            },
            "interval": {
                "title": "Interval",
                "description": "Poll interval (seconds)",
                "type": "integer",
                "minimum": 0, "maximum": 3600, "default": 5
            },
            "upInterval": {
                "title": "Up-Interval",
                "description": "Poll interval when service is already up (seconds)",
                "type": "integer",
                "minimum": 0, "maximum": 3600, "default": 0
            },
            "timeUntilUp": {
                "title": "Time until up",
                "description": "Delay between successful probe and sending traffic to node (seconds)",
                "type": "integer",
                "minimum": 0, "maximum": 1800, "default": 0
            },
            "timeout": {
                "title": "Timeout",
                "description": "Time limit for node to respond (seconds)",
                "type": "integer",
                "minimum": 0, "maximum": 900, "default": 16
            }
        },

        "if": { "properties": { "monitorType": { "const": "icmp" } } },
        "then": { "$ref": "#/definitions/Monitor_ICMP" },
        "else": {
            "properties": {
                "targetPort": {
                    "title": "Port",
                    "description": "L4 port (if any) monitor should probe; if 0 (default) then pool member port",
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 65535,
                    "default": 0
                }
            },
         "if": { "properties": { "monitorType": { "const": "http" } } },
         "then": { "$ref": "#/definitions/Monitor_HTTP" },
         "else": {
          "if": { "properties": { "monitorType": { "const": "https" } } },
          "then": { "$ref": "#/definitions/Monitor_HTTPS" },
          "else": {
           "if": { "properties": { "monitorType": { "const": "external" } } },
           "then": { "$ref": "#/definitions/Monitor_External" },
           "else": {
            "if": { "properties": { "monitorType": { "const": "tcp" } } },
            "then": {
                "properties": {
                    "dscp": {
                        "title": "IP DSCP",
                        "description": "Value for IP DSCP (ex-TOS) field (default 0)",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 63,
                        "default": 0
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Monitor_Send_Recv" }
            },
            "else": {
             "if": { "properties": { "monitorType": { "const": "udp" } } },
             "then": { "$ref": "#/definitions/Monitor_Send_Recv" },
             "else": {
              "if": { "properties": { "monitorType": { "const": "smtp" } } },
              "then": { "$ref": "#/definitions/Monitor_SMTP" },
              "else": {
               "if": { "properties": { "monitorType": { "const": "sip" } } },
               "then": { "$ref": "#/definitions/Monitor_SIP" },
               "else": {
                "if": {
                 "properties": { "monitorType": { "const": "tcp-half-open" } }
                },
                "then": { "$ref": "#/definitions/Monitor_TCP_Half_Open" },
                "else": {
                 "$comment": "Unrecognized monitorType.",
                 "not": {}
                }
               }
              }
             }
            }
           }
          }
         }
        },
        "required": [ "class", "monitorType" ]
    },

    "Monitor_May_Adapt": {
        "description": "Additional Monitor class properties available when monitorType = http, https, tcp, udp, or icmp",
        "properties": {
            "adaptive": {
                "title": "Adaptive",
                "description": "If true, use adaptive probe timing",
                "type": "boolean",
                "default": false
            },
            "adaptiveDivergenceType": {
                "title": "Adaptive divergence type",
                "description": "Adaptive divergence, 'absolute' selects milliseconds, 'relative' (default) selects percentage",
                "type": "string",
                "enum": [ "absolute", "relative" ],
                "default": "relative"
            },
            "adaptiveDivergenceMilliseconds": {
                "title": "Adaptive divergence msec",
                "description": "Probe fails if response latency exceeds mean by this many milliseconds",
                "type": "integer",
                "minimum": 1, "maximum": 10000, "default": 500
            },
            "adaptiveDivergencePercentage": {
                "title": "Adaptive divergence percent",
                "description": "Probe fails if response latency exceeds mean by this percentage",
                "type": "integer",
                "minimum": 1, "maximum": 500, "default": 100
            },
            "adaptiveLimitMilliseconds": {
                "title": "Adaptive limit msec",
                "description": "Probe fails if response latency exceeds this many milliseconds",
                "type": "integer",
                "minimum": 1, "maximum": 10000, "default": 1000
            },
            "adaptiveWindow": {
                "title": "Adaptive window",
                "description": "Time window over which latency is sampled (seconds)",
                "type": "integer",
                "minimum": 60, "maximum": 1800, "default": 180
            }
        }
    },

    "Monitor_External": {
        "description": "Additional Monitor class properties available when monitorType = external",
        "properties": {
            "command": {
                "title": "Command",
                "description": "Full (Linux) pathname of command (will be backquote-expanded)",
                "type": "string",
                "minLength": 2,
                "f5expand": true
            },
            "arguments": {
                "title": "Arguments",
                "description": "Arguments to specified command (will be backquote-expanded)",
                "type": "string",
                "default": "",
                "f5expand": true
            }
        },
        "required": [ "command" ]
    },

    "Monitor_HTTP": {
        "description": "Additional Monitor class properties available when monitorType = http or https",
        "properties": {
            "send": {
                "title": "Send",
                "description": "Send this (backquote-expanded) string to query node",
                "type": "string",
                "default": "HEAD / HTTP/1.0\\r\\n\\r\\n",
                "f5expand": true
            },
            "receive": {
                "title": "Receive = up",
                "description": "Mark node up upon receipt of this (backquote-expanded) string",
                "type": "string",
                "default": "HTTP/1.",
                "f5expand": true
            },
            "receiveDown": {
                "title": "Receive = down",
                "description": "Mark node down upon receipt of this (backquote-expanded) string (optional; must be empty when 'reverse' is true)",
                "type": "string",
                "default": "",
                "f5expand": true
            },
            "reverse": {
                "title": "Reverse",
                "description": "If true, mark node down upon receipt of 'receive' string",
                "type": "boolean",
                "default": false
            },
            "username": {
                "title": "Username",
                "description": "Username if any for query authentication",
                "type": "string"
            },
            "passphrase": {
                "title": "Passphrase",
                "description": "Passphrase if any for query authentication",
                "type": "object",
                "properties": {
                    "allowReuse": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Secret" },
                "f5fetch": "object",
                "f5secret": true
            },
            "transparent": {
                "title": "Transparent",
                "description": "If true, treat pool member address as gateway to server (node) (default false)",
                "type": "boolean",
                "default": false
            },
            "dscp": {
                "title": "IP DSCP",
                "description": "Value for IP DSCP (ex-TOS) field (default 0)",
                "type": "integer",
                "minimum": 0,
                "maximum": 63,
                "default": 0
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Monitor_May_Adapt" },

        "dependencies": {
            "reverse": {
                "if": { "properties": { "reverse": { "const": true } } },
                "then": { "properties": { "receiveDown": { "const": "" } } }
            }
        }
    },

    "Monitor_HTTPS": {
        "description": "Additional Monitor class properties available when monitorType = https",
        "properties": {
            "ciphers": {
                "title": "Ciphers",
                "description": "Ciphersuite selection string",
                "type": "string",
                "default": "DEFAULT"
            },
            "clientCertificate": {
                "title": "Client certificate",
                "description": "AS3 pointer to client Certificate declaration, for TLS authentication (optional)",
                "type": "string",
                "minLength": 1,
                "f5pointsTo": {
                    "properties": {
                        "class": { "const": "Certificate" }
                    },
                    "required": [ "class" ]
                }
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Monitor_HTTP" }
    },

    "Monitor_ICMP": {
        "description": "Additional Monitor class properties available when monitorType = icmp",
        "properties": {
            "transparent": {
                "title": "Transparent",
                "description": "If true, treat pool member address as gateway to server (node) (default false)",
                "type": "boolean",
                "default": false
            }
        },
        "if": true,
        "then": { "$ref": "#/definitions/Monitor_May_Adapt" }
    },

    "Monitor_SIP": {
        "description": "Additional Monitor class properties available when monitorType = sip",
        "properties": {
            "protocol": {
                "title": "Protocol",
                "description": "SIP transport protocol",
                "type": "string",
                "enum": [ "sips", "tcp", "tls", "udp" ],
                "default": "udp"
            },
            "request": {
                "title": "Request",
                "description": "SIP request to send in probes (default empty)",
                "type": "string",
                "default": ""
            },
            "headers": {
                "title": "Headers",
                "description": "SIP headers to send in probes (if any)--separate by newlines (backquote-expanded)",
                "type": "string",
                "default": "",
                "f5expand": true
            },
            "codesUp": {
                "title": "Codes = up",
                "description": "List of additional (to all 1/2/3xx) status codes meaning service is up (0 matches any code)",
                "type": "array",
                "items": {
                    "title": "Code = up",
                    "type": "integer",
                    "minimum": 0
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "codesDown": {
                "title": "Codes = down",
                "description": "List of status codes meaning service is down (0 matches any code)",
                "type": "array",
                "items": {
                    "title": "Code = down",
                    "type": "integer",
                    "minimum": 0
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "ciphers": {
                "title": "Ciphers",
                "description": "Ciphersuite selection string",
                "type": "string",
                "default": "DEFAULT"
            },
            "clientCertificate": {
                "title": "Client certificate",
                "description": "AS3 pointer to client Certificate declaration, for TLS authentication (optional)",
                "type": "string",
                "minLength": 1,
                "f5pointsTo": {
                    "properties": {
                        "class": { "const": "Certificate" }
                    },
                    "required": [ "class" ]
                }
            }
        },
        "dependencies": {
            "clientCertificate": {
                "properties": { "protocol": { "enum": [ "sips", "tls" ] } }
            }
        }
    },

    "Monitor_SMTP": {
        "description": "Additional Monitor class properties available when monitorType = smtp",
        "properties": {
            "domain": {
                "title": "Domain",
                "description": "Mail domain to check, if any (backquote-expanded)",
                "type": "string",
                "format": "hostname",
                "default": "",
                "f5expand": true
            }
        }
    },

    "Monitor_Send_Recv": {
        "description": "Additional Monitor class properties available when monitorType = tcp or udp",
        "properties": {
            "send": {
                "title": "Send",
                "description": "Send this (backquote-expanded) string to node",
                "type": "string",
                "f5expand": true
            },
            "receive": {
                "title": "Receive = up",
                "description": "Mark node up upon receipt of this (backquote-expanded) string",
                "type": "string",
                "f5expand": true
            },
            "receiveDown": {
                "title": "Receive = down",
                "description": "Mark node down upon receipt of this (backquote-expanded) string (optional; must be empty when 'reverse' is true)",
                "type": "string",
                "default": "",
                "f5expand": true
            },
            "reverse": {
                "title": "Reverse",
                "description": "If true, mark node down upon receipt of 'receive' string",
                "type": "boolean",
                "default": false
            },
            "transparent": {
                "title": "Transparent",
                "description": "If true, treat pool member address as gateway to server (node) (default false)",
                "type": "boolean",
                "default": false
            }
        },

        "if": true,
        "then": { "$ref": "#/definitions/Monitor_May_Adapt" },

        "dependencies": {
            "reverse": {
                "if": { "properties": { "reverse": { "const": true } } },
                "then": { "properties": { "receiveDown": { "const": "" } } }
            }
        },
        "required": [ "send", "receive" ]
    },

    "Monitor_TCP_Half_Open": {
        "description": "Additional Monitor class properties available when monitorType = tcp-half-open",
        "properties": {
            "transparent": {
                "title": "Transparent",
                "description": "If true, treat pool member address as gateway to server (node) (default false)",
                "type": "boolean",
                "default": false
            }
        }
    },


    "TLS_Server": {
        "title": "TLS Server",
        "description": "TLS server parameters (connections arriving to ADC)",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "TLS_Server"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "requireSNI": {
                "title": "Require SNI",
                "description": "When client sends no or unknown SNI and Require SNI is false (default) primary certificate will be used, otherwise client will be rejected",
                "type": "boolean",
                "default": false
            },
            "certificates": {
                "title": "Certificates",
                "description": "Primary and (optional) additional certificates (order is significant, element 0 is primary cert)",
                "type": "array",
                "items": {
                    "type": "object",
                     "properties": {
                        "matchToSNI": {
                            "title": "Match to SNI",
                            "description": "If value is FQDN (wildcard okay), ignore all names in certificate and select this cert when SNI matches value (or by default)",
                            "type": "string"
                        },
                        "certificate": {
                            "title": "Certificate",
                            "description": "AS3 pointer to Certificate declaration",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "Certificate" }
                                },
                                "required": [ "class" ]
                            }
                        }
                    },
                    "required": [ "certificate" ]
                },
                "minItems": 1,
                "$comment": "uniqueItems: true"
            },
            "ciphers": {
                "title": "Ciphers",
                "description": "Ciphersuite selection string",
                "type": "string",
                "default": "DEFAULT"
            },
             "authenticationMode": {
                "title": "Authentication mode",
                "description": "Client certificate authentication mode",
                "type": "string",
                "enum": [ "ignore", "request", "require" ],
                "default": "ignore"
            },
            "authenticationFrequency": {
                "title": "Authentication frequency",
                "description": "Client certificate authentication frequency",
                "type": "string",
                "enum": [ "one-time", "every-time" ],
                "default": "one-time"
            },
            "authenticationTrustCA": {
                "title": "Authentication trust CA",
                "description": "AS3 pointer to declaration of CA Bundle used to validate client certificates",
                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "CA_Bundle" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP CA bundle",
                            "description": "Pathname of existing BIG-IP CA bundle",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query sys file ssl-cert"
                }
            },
            "authenticationInviteCA": {
                "title": "Authentication invite CA",
                "description": "AS3 pointer to declaration of CA Bundle used to invite client certificates",
                "if": { "type": "string" },
                "then": {
                    "minLength": 1,
                    "f5pointsTo": {
                        "properties": {
                            "class": { "const": "CA_Bundle" }
                        },
                        "required": [ "class" ]
                    }
                },
                "else": {
                    "type": "object",
                    "properties": {
                        "bigip": {
                            "title": "BIG-IP CA bundle",
                            "description": "Pathname of existing BIG-IP CA bundle",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "required": [ "bigip" ],
                    "f5bigComponent": "query sys file ssl-cert"
                }
            }
        },
        "additionalProperties": false,

        "if": {
            "properties": {
                "authenticationMode": { "enum": [ "request", "require" ] }
            }
        },
        "then": {
            "required": [ "authenticationTrustCA" ]
        },
        "required": [ "class", "certificates" ]
    },


    "TLS_Client": {
        "title": "TLS Client",
        "description": "TLS client parameters (connections leaving ADC)",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "TLS_Client"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "sendSNI": {
                "title": "Send SNI",
                "description": "FQDN to send in SNI (optional)",
                "type": "string",
                "format": "hostname",
                "default": "none"
            },
            "ciphers": {
                "title": "Ciphers",
                "description": "Ciphersuite selection string",
                "type": "string",
                "default": "DEFAULT"
            },
            "serverName": {
                "title": "Server name",
                "description": "FQDN which server certificate must match (optional)",
                "type": "string",
                "format": "hostname",
                "default": "none"
            },
            "validateCertificate": {
                "title": "Validate certificate",
                "description": "If false (default) accept any cert from server, else validate server cert against trusted CA bundle",
                "type": "boolean",
                "default": false
            },
            "trustCA": {
                "title": "Trusted CA bundle",
                "description": "CA's trusted to validate server certificate; 'generic' (default) or else AS3 pointer to declaration of CA Bundle",
                "if": { "not": { "type": "object" } },
                "then": {
                    "type": "string",
                    "enum": [ "generic" ],
                    "default": "generic"
                },
                "else": {
                    "properties": {
                        "use": {
                            "title": "Use",
                            "description": "AS3 pointer to declaration of CA bundle",
                            "type": "string",
                            "minLength": 1,
                            "f5pointsTo": {
                                "properties": {
                                    "class": { "const": "CA_Bundle" }
                                },
                                "required": [ "class" ]
                            }
                        },
                        "bigip": {
                            "title": "BIG-IP CA bundle",
                            "description": "Pathname of existing BIG-IP CA bundle",
                            "type": "string",
                            "format": "f5bigip"
                        }
                    },
                    "additionalProperties": false,
                    "minimumProperties": 1,
                    "maximumProperties": 1,
                    "f5bigComponent": "query sys file ssl-cert"
                }
            },
            "ignoreExpired": {
                "title": "Ignored expired",
                "description": "If false (default) drop connection if server certificate has expired",
                "type": "boolean",
                "default": false
            },
            "ignoreUntrusted": {
                "title": "Ignored untrusted",
                "description": "If false (default) drop connection if server certificate is untrusted",
                "type": "boolean",
                "default": false
            },
            "sessionTickets": {
                "title": "Session tickets",
                "description": "If false (default) do not use rfc5077 session tickets",
                "type": "boolean",
                "default": false
            },
             "clientCertificate": {
                "title": "Client certificate",
                "description": "AS3 pointer to client Certificate declaration (optional)",
                "type": "string",
                "f5pointsTo": {
                    "properties": {
                        "class": { "const": "Certificate" }
                    },
                    "required": [ "class" ]
                }
            }
        },
        "additionalProperties": false,
        "required": [ "class" ]
    },


    "Certificate": {
        "title": "Certificate",
        "description": "PKI certificate with optional private-key and/or chain, optional OCSP stapler",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Certificate"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "pkcs12": {
                "title": "PKCS#12 certificate+key",
                "description": "PKCS#12 (.p12/.pfx) blob containing both certificate and private key",
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "binary"
            },
            "certificate": {
                "title": "Certificate",
                "description": "X.509 public-key certificate",
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "pki-cert",
                "f5bigComponent": "query sys file ssl-cert"
            },
            "privateKey": {
                "title": "Private key",
                "description": "Private key matching certificate's public key (optional)",
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "pki-key",
                "f5bigComponent": "query sys file ssl-key"
            },
            "passphrase": {
                "title": "Passphrase",
                "description": "If supplied, used to decrypt privateKey at runtime (optional)",
                "type": "object",
                "properties": {
                    "allowReuse": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Secret" },
                "f5fetch": "object",
                "f5secret": true
            },
            "chainCA": {
                "title": "CA chain",
                "description": "Bundle of one or more CA certificates in trust-chain from root CA to certificate (optional)",
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "pki-bundle",
                "f5bigComponent": "query sys file ssl-cert"
            },
            "staplerOCSP": {
                "title": "OCSP Stapler",
                "description": "AS3 pointer to OCSP Stapler declaration (optional)",
                "type": "object",
                "properties": {
                    "bigip": {
                        "title": "BIG-IP OCSP stapling params",
                        "description": "Pathname of existing BIG-IP OCSP stapling parameters",
                        "type": "string",
                        "format": "f5bigip"
                    }
                },
                "required": [ "bigip" ],
                "f5bigComponent": "query ltm profile ocsp-stapling-params"
            }
        },
        "additionalProperties": false,

        "if": { "required": [ "pkcs12" ] },
        "then": {
            "dependencies": {
                "certificate": { "not": {} },
                "privateKey": { "not": {} }
            }
        },
        "else": {
            "required": [ "certificate" ],
            "not": { "required": [ "pkcs12" ] }
        },
        "required": [ "class" ]
    },


    "CA_Bundle": {
        "title": "CA Bundle",
        "description": "Bundle of one or more PKI Certificate-Authority certificates",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "CA_Bundle"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "bundle": {
                "if": true,
                "then": { "$ref": "#/definitions/F5string" },
                "f5fetch": "pki-cert",
                "f5bigComponent": "query sys file ssl-cert"
            }
        },
        "additionalProperties": false,
        "required": [ "class", "bundle" ]
    },


    "HTTP_Profile": {
        "title": "HTTP Profile",
        "type": "object",
        "description": "HTTP profile with configurable options",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "HTTP_Profile"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "proxyType": {
                "title": "Proxy type",
                "description": "Default value 'reverse' is usually appropriate.  'transparent' is used when virtual server will handle a mix of HTTP and non-HTTP traffic.  'explicit' is used when clients will ask ADC to proxy connections to arbitrary remote services",
                "type": "string",
                "enum": [ "reverse", "transparent", "explicit" ],
                "default": "reverse"
            },

            "encryptCookies": {
                "title": "Encrypt cookies",
                "description": "List cookies to encrypt en-route to the client and decrypt en-route to a pool member",
                "type": "array",
                "items": {
                    "title": "Cookie name",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x20\\x22=\\x5c\\x7f-\\xff]+$"
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "cookiePassphrase": {
                "title": "Cookie encryption passphrase",
                "description": "Used to create secret key for cookie encryption (when missing a system-generated key will be used)",
                "type": "object",
                "properties": {
                    "allowReuse": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Secret" },
                "f5fetch": "object",
                "f5secret": true
            },

            "fallbackRedirect": {
                "title": "Fallback Redirect",
                "description": "Domain name (or IP address) of service (if any) to which a request should be redirected when no pool member is responsive or selected pool member returns a fallbackStatusCode",
                "type": "string",
                "minLength": 1,
                "anyOf": [
                    { "format": "hostname" },
                    { "format": "f5ip" }
                ]
            },
            "fallbackStatusCodes": {
                "title": "Fallback status codes",
                "description": "When a pool member responds to a request with one of these HTTP status codes (for example, 500), redirect the client to the fallbackRedirect",
                "type": "array",
                "items": {
                    "title": "Status code",
                    "type": "integer",
                    "minimum": 100,
                    "maximum": 999
                },
                "minItems": 1,
                "uniqueItems": true
            },

            "requestChunking": {
                "title": "Request chunking",
                "description": "Controls handling of HTTP payload chunking in requests from clients (default is 'preserve')",
                "type": "string",
                "enum": [ "selective", "preserve", "rechunk" ],
                "default": "preserve"
            },
            "responseChunking": {
                "title": "Response chunking",
                "description": "Controls handling of HTTP payload chunking in responses from pool members (default 'selective' adapts to most situations)",
                "type": "string",
                "enum": [ "selective", "preserve", "unchunk", "rechunk" ],
                "default": "selective"
            },
            "rewriteRedirects": {
                "title": "Rewrite redirects",
                "description": "In selected Location-header values (default none) of redirect responses from pool members, change protocol HTTP to HTTPS before passing redirects to clients",
                "type": "string",
                "enum": [ "none", "all", "matching", "addresses"],
                "default": "none"
            },
            "multiplexTransformations": {
                "title": "Multiplex transformations",
                "description": "If true (default), request headers will be adjusted to work properly when the virtual server uses a Multiplex profile",
                "type": "boolean",
                "default": true
            },

            "insertHeader": {
                "title": "Insert header",
                "description": "You may insert one header into each request before it is sent to a pool member.  The header value may be a simple string or the result of an iRules TCL expression (for example, [IP::client_addr]).  This is the most efficient way to insert a single header; to insert multiple headers use an iRule or a Endpoint policy",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Header name",
                        "type": "string",
                        "pattern": "^[^\\x00-\\x20\\x22:\\x5c\\x7f-\\xff]{1,128}$"
                    },
                    "value": {
                        "title": "Header value",
                        "description": "May contain iRules TCL expression",
                        "type": "string",
                        "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]*$"
                    }
                }
            },
            "whiteOutHeader": {
                "title": "White-out header",
                "description": "You may name one request header to be whited-out of each request before it is sent to a pool member.  To remove more than a single named header, use an iRule or a Endpoint policy.  (Whiting-out a header leaves its name but replaces its value in the request with space characters (ASCII 0x20) to avoid changing the length of the headers.)",
                "type": "string",
                "pattern": "^[^\\x00-\\x20\\x22:\\x5c\\x7f-\\xff]{1,128}$"
            },
            "allowedResponseHeaders": {
                "title": "Allow response headers",
                "description": "By default HTTP headers in responses from pool members are passed to clients unaltered.  You may list names of allowed response headers here and any you do not list will be removed from responses",
                "type": "array",
                "items": {
                    "title": "Allowed header",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x20\\x22:\\x5c\\x7f-\\xff]{1,128}$"
                },
                "minItems": 1,
                "uniqueItems": true
            },

            "xForwardedFor": {
                "title": "Insert X-Forwarded-For",
                "description": "If true, insert an X-Forwarded-For header carrying the client IP address into each HTTP request sent to a pool member (default false)",
                "type": "boolean",
                "default": true
            },
            "trustXFF": {
                "title": "Trust X-Forwarded-For",
                "description": "If true, WAF (ASM) and AVR may trust X-Forwarded-For headers found in incoming requests and report statistics using client IP addresses appearing in them (default false).  Use this feature only when you control upstream gateway(s)",
                "type": "boolean",
                "default": false
            },
            "otherXFF": {
                "title": "Other XFF headers",
                "description": "Names of request headers to treat as equivalent to X-Forwarded-For (see trustXFF)",
                "type": "array",
                "items": {
                    "title": "Header name",
                    "type": "string",
                    "minLength": 1,
                    "pattern": "^[^\\x00-\\x20\\x22:\\x5c\\x7f-\\xff]{1,128}$"
                },
                "minItems": 1,
                "uniqueItems": true
            },

            "hstsInsert": {
                "title": "Insert HSTS headers",
                "description": "If true, insert HSTS (HTTP Strict Transport Security) headers into responses sent to clients (default false).  Warning:  misconfiguration of HSTS can make a website unreachable",
                "type": "boolean",
                "default": false
            },
            "hstsPeriod": {
                "title": "Period of HSTS",
                "description": "If hstsInsert is true, this value tells each client how long (in seconds; default 7862400 equals 91 days) to wait before refreshing HSTS settings for this service.  Warning:  once a client receives erroneous HSTS settings it will ignore any attempt to correct them until this period has expired",
                "type": "integer",
                "minimum": 0,
                "maximum": 31557600,
                "default": 7862400
            },
            "hstsIncludeSubdomains": {
                "title": "Include subdomains in HSTS",
                "description": "If true then HSTS headers (see hstsInsert) will tell clients to apply HSTS settings to the hostnames of this service and all their possible subdomains.  Warning: an incorrect value here can make multiple websites unreachable, not just this service",
                "type": "boolean",
                "default": true
            },

            "viaRequest": {
                "title": "Via request control",
                "description": "Controls treatment of Via: headers in requests from clients.  When set to 'append' viaHost is required",
                "type": "string",
                "enum": [ "append", "preserve", "remove"  ],
                "default": "remove"
            },
            "viaResponse": {
                "title": "Via response control",
                "description": "Controls treatment of Via: headers in responses from pool members.  When set to 'append' viaHost is required",
                "type": "string",
                "enum": [ "append", "preserve", "remove"  ],
                "default": "remove"
            },
            "viaHost": {
                "title": "Via hostname",
                "description": "Hostname to place in Via header when viaRequest or viaResponse is 'append'",
                "type": "string",
                "minLength": 1,
                "anyOf": [
                    { "format": "hostname" },
                    { "format": "f5ip" }
                ]
            },

            "serverHeaderValue": {
                "title": "Server header value",
                "description": "Server header value to place in responses generated by the ADC itself (not obtained from a pool member)",
                "type": "string",
                "default": "BigIP"
            },

            "knownMethods": {
                "title": "Known methods",
                "description": "List of HTTP request methods to be recognized as normal.  Any method not in this list will provoke the 'unknownMethodAction' action",
                "type": "array",
                "items": {
                    "title": "HTTP method",
                    "type": "string",
                    "pattern": "^[A-Z0-9]{1,32}$"
                },
                "minItems": 0,
                "uniqueItems": true,
                "default": [
                    "CONNECT", "DELETE", "GET", "HEAD",
                    "LOCK", "OPTIONS", "POST", "PROPFIND",
                    "PUT", "TRACE", "UNLOCK"
                ]
            },
            "unknownMethodAction": {
                "title": "Unknown method action",
                "description": "Default 'allow' means clients may make HTTP requests using unknown methods.  Otherwise, 'reject' means to discard any unknown-method request and reject the client connection, and 'pass-through' causes the connection to switch to pass-through mode upon the first unknown-method request",
                "type": "string",
                "enum": [ "allow", "reject", "pass-through" ],
                "default": "allow"
            },
            "maxRequests": {
                "title": "Maximum requests per connection",
                "description": "When more than this number of requests have been processed through a connection it will be closed.  Default 0 means permit unlimited requests",
                "type": "integer",
                "minimum": 0,
                "maximum": 2147483647
            },
            "pipelineAction": {
                "title": "Pipeline action",
                "description": "Default 'allow' means clients may pipeline HTTP/1.1 requests to pool members which support pipelining.  Otherwise, 'reject' prevents pipelining, and 'pass-through' causes the connection to switch to pass-through mode when pipelining is detected",
                "type": "string",
                "enum": [ "allow", "reject", "pass-through" ],
                "default": "allow"
            }
        },

        "if": { "properties": { "proxyType": { "const": "transparent" } } },
        "then": {
            "properties": {
                "maxHeaderCount": {
                    "title": "Maximum header count",
                    "description": "When the number of headers in a request or response exceeds this value (default 32), take the excessX...Headers action",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1024,
                    "default": 32
                },
                "maxHeaderSize": {
                    "title": "Maximum header size",
                    "description": "When the total size in octets of the headers of request or response exceeds this value (default 16384), take the oversizeX...Headers action",
                    "type": "integer",
                    "minimum": 9,
                    "maximum": 262144,
                    "default": 16384
                },
                "excessClientHeaders": {
                    "title": "Excess client headers action",
                    "description": "When a client request violates maxHeaderCount, either switch to pass-through mode (default) or reject the connection",
                    "type": "string",
                    "enum": [ "pass-through", "reject" ],
                    "default": "pass-through"
                },
                "excessServerHeaders": {
                    "title": "Excess server headers action",
                    "description": "When a pool member response violates maxHeaderCount, either switch to pass-through mode (default) or reject the connection",
                    "type": "string",
                    "enum": [ "pass-through", "reject" ],
                    "default": "pass-through"
                },
                "oversizeClientHeaders": {
                    "title": "Oversize client headers action",
                    "description": "When a client request violates maxHeaderSize, either switch to pass-through mode (default) or reject the connection",
                    "type": "string",
                    "enum": [ "pass-through", "reject" ],
                    "default": "pass-through"
                },
                "oversizeServerHeaders": {
                    "title": "Oversize server headers action",
                    "description": "When a pool member response violates maxHeaderSize, either switch to pass-through mode (default) or reject the connection",
                    "type": "string",
                    "enum": [ "pass-through", "reject" ],
                    "default": "pass-through"
                },
                "truncatedRedirects": {
                    "title": "Truncated redirects",
                    "description": "If true (default) pass malformed redirects to client",
                    "type": "boolean",
                    "default": true
                }
            }
        },
        "else": {
            "properties": {
                "maxHeaderCount": {
                    "title": "Maximum header count",
                    "description": "When the number of headers in an incoming HTTP request exceeds this value, discard the request and reset the client connection",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 1024,
                    "default": 64
                },
                "maxHeaderSize": {
                    "title": "Maximum header size",
                    "description": "When the total size in octets of the headers of an incoming HTTP request exceeds this value, discard the request and reset the client connection",
                    "type": "integer",
                    "minimum": 9,
                    "maximum": 262144,
                    "default": 32768
                },
                "truncatedRedirects": {
                    "title": "Truncated redirects",
                    "description": "If false (default) elide malformed redirects from pool members, otherwise pass them to client",
                    "type": "boolean",
                    "default": false
                }
            },

            "if": { "properties": { "proxyType": { "const": "explicit" } } },
            "then": {
                "properties": {
                    "proxyEnabled": {
                        "title": "Proxy enabled",
                        "description": "Explicit proxy handles traffic only when enabled (note: default false)",
                        "type": "boolean",
                        "default": false
                    },
                    "resolver": {
                        "title": "DNS resolver",
                        "description": "AS3 pointer to DNS resolver used to resolve hostnames in client requests",
                        "type": "object",
                        "properties": {
                            "bigip": {
                                "title": "BIG-IP resolver",
                                "description": "Pathname of existing BIG-IP net DNS resolver",
                                "type": "string",
                                "format": "f5bigip"
                            }
                        },
                        "required": [ "bigip" ],
                        "f5bigComponent": "query net dns-resolver"
                    },
                    "doNotProxyHosts": {
                        "title": "Do-not-proxy hosts",
                        "description": "When a client makes a (proxy-type) request to some host on this list, that request will simply be load-balanced to a pool member (without DNS resolution).  This is ineffective for HTTPS requests",
                        "type": "array",
                        "items": {
                            "title": "host",
                            "type": "string",
                            "anyOf": [
                                { "format": "hostname" },
                                { "format": "f5ip" }
                            ]
                        },
                        "minItems": 1,
                        "uniqueItems": true
                    },
                    "tunnelName": {
                        "title": "Tunnel name",
                        "description": "Name of tunnel used for outbound CONNECT requests (default 'http-tunnel')",
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 63,
                        "default": "http-tunnel",
                        "f5bigComponent": "query net tunnels tunnel"
                    },
                    "defaultConnectAction": {
                        "title": "Default CONNECT action",
                        "description": "By default (value 'deny') CONNECT requests from clients will be refused except when there is a virtual server listening to the tunnelName tunnel to accept and process them (typically to authorize and/or intercept outbound TLS connections).  Value 'allow' will let clients CONNECT to arbitrary remote services",
                        "type": "string",
                        "enum": [ "deny", "allow" ],
                        "default": "deny"
                    },
                    "routeDomain": {
                        "title": "Exit route domain",
                        "description": "Proxy requests will leave the ADC from a Self IP in this route domain (default 0)",
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 65535,
                        "default": 0,
                        "f5bigComponent": "query net route-domain"
                    },
                    "connectErrorMessage": {
                        "title": "Connect-error message",
                        "description": "Message returned to client when proxy connection cannot be established.  May include iRules TCL expressions",
                        "type": "string",
                        "maxLength": 65279,
                        "default": "<html><head><title>Connection Error</title></head><body><h2>Unable to connect to host in proxy request</h2></body></html>"
                    },
                    "dnsErrorMessage": {
                        "title": "DNS-error message",
                        "description": "Message returned to client when hostname in request cannot be resolved.  May include iRules TCL expressions",
                        "type": "string",
                        "maxLength": 65279,
                        "default": "<html><head><title>DNS Resolution Error</title></head><body><h2>Cannot resolve hostname in proxy request</h2></body></html>"
                    },
                    "badRequestMessage": {
                        "title": "Bad-request message",
                        "description": "Message returned to client when proxy request is erroneous.  May include iRules TCL expressions",
                        "type": "string",
                        "maxLength": 65279,
                        "default": "<html><head><title>Bad Request</title></head><body><h2>Invalid proxy request</h2></body></html>"
                    },
                    "badResponseMessage": {
                        "title": "Bad-response message",
                        "description": "Message returned to client when response to proxy request is erroneous.  May include iRules TCL expressions",
                        "type": "string",
                        "maxLength": 65279,
                        "default": "<html><head><title>Bad Response</title></head><body><h2>Proxy request provoked invalid response</h2></body></html>"
                    }
                }
            }
        },

        "dependencies": {
            "cookiePassphrase": {
                "required": [ "encryptCookies" ]
            },
            "fallbackStatusCodes": {
                "required": [ "fallbackRedirect" ]
            },
            "viaRequest": {
                "if": { "properties": { "viaRequest": { "const": "append" } } },
                "then": { "required": [ "viaHost" ] }
            },
            "viaResponse": {
                "if": { "properties": { "viaResponse": { "const": "append" } } },
                "then": { "required": [ "viaHost" ] }
            }
        },
        "required": [ "class" ]
    },


    "HTTP_Compress": {
        "title": "HTTP Compression profile",
        "type": "object",
        "description": "HTTP Compression profile with configurable options",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "HTTP_Compress"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "allowHTTP10": {
                "title": "Allow HTTP/1.0",
                "description": "If true, HTTP/1.0 responses may be compressed (default false)",
                "type": "boolean",
                "default": false
            },
            "bufferSize": {
                "title": "Buffer size",
                "description": "Maximum number of response octets to buffer before deciding whether to apply compression (default 4096)",
                "type": "integer",
                "minimum": 256,
                "maximum": 32768,
                "default": 4096
            },
            "contentTypeExcludes": {
                "title": "Content-Type exclude list",
                "description": "List of response Content-Type values which should not be compressed.  Values are regular expressions that match Content-Type strings",
                "type": "array",
                "items": {
                    "title": "Content-Type regex",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x1f\\x22\\x7f-\\xff]+$"
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "contentTypeIncludes": {
                "title": "Content-Type include list",
                "description": "List of response Content-Type values which should be compressed.  Values are regular expressions that match Content-Type strings",
                "type": "array",
                "items": {
                    "title": "Content-Type regex",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x1f\\x22\\x7f-\\xff]+$"
                },
                "minItems": 1,
                "uniqueItems": true,
                "default": [ "text/", "application/(xml|x-javascript)" ]
            },
            "uriExcludes": {
                "title": "URI exclude list",
                "description": "List of request URI's for which responses should not be compressed.  Values are regular expressions that match request URI strings",
                "type": "array",
                "items": {
                    "title": "URI regex",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "uriIncludes": {
                "title": "URI include list",
                "description": "List of request URI's for which responses should be compressed.  Values are regular expressions that match URI strings",
                "type": "array",
                "items": {
                    "title": "URI regex",
                    "type": "string",
                    "pattern": "^[^\\x00-\\x1f\\x7f-\\xff]+$"
                },
                "minItems": 1,
                "uniqueItems": true
            },
            "cpuSaver": {
                "title": "CPU saver",
                "description": "If true (default), system will reduce compression rate when CPU utilization exceeds cpuSaverHigh threshold and increase it when CPU utilization falls below cpuSaverLow threshold",
                "type": "boolean",
                "default": true
            },
            "cpuSaverHigh": {
                "title": "CPU-saver %high",
                "description": "CPU utilization percentage (default 90) above which compression should be moderated",
                "type": "integer",
                "minimum": 15,
                "maximum": 99,
                "default": 90
            },
            "cpuSaverLow": {
                "title": "CPU-saver %low",
                "description": "CPU utilization percentage (default 75) below which compression may be returned to normal",
                "type": "integer",
                "minimum": 10,
                "maximum": 95,
                "default": 75
            },
            "minimumSize": {
                "title": "Minimum size to compress",
                "description": "Responses of fewer octets than this (default 1024) will not be compressed",
                "type": "integer",
                "minimum": 128,
                "maximum": 131072,
                "default": 1024
            },
            "preferMethod": {
                "title": "Prefer method",
                "description": "Select preferred compression method (default gzip, strongly recommended)",
                "type": "string",
                "enum": [ "gzip", "deflate" ],
                "default": "gzip"
            },
            "gzipLevel": {
                "title": "GZIP level",
                "description": "Compression level (default 1); higher values produce greater compression but use more CPU cycles",
                "type": "integer",
                "minimum": 1,
                "maximum": 9,
                "default": 1
            },
            "gzipMemory": {
                "title": "GZIP memory level",
                "description": "Compression memory allocation in kilobytes (default 8), should be a power of two",
                "type": "integer",
                "minimum": 1,
                "maximum": 256,
                "default": 8
            },
            "gzipWindowSize": {
                "title": "GZIP window size",
                "description": "Compression window size in kilobytes (default 16), should be a power of two",
                "type": "integer",
                "minimum": 1,
                "maximum": 128,
                "default": 16
            },
            "keepAcceptEncoding": {
                "title": "Keep Accept-Encoding header",
                "description": "If true, pool member may compress responses; if false (default) ADC will compress responses.  Set to true when pool member stores/caches pre-compressed responses",
                "type": "boolean",
                "default": false
            },
            "selective": {
                "title": "Selective mode",
                "description": "If true, a response will only be compressed when an iRule attached to the virtual server requests it (default is false, meaning responses which meet the criteria in this profile will be compressed)",
                "type": "boolean",
                "default": false
            },
            "varyHeader": {
                "title": "Vary header",
                "description": "If true (default), a Vary header will appear in compressed responses",
                "type": "boolean",
                "default": true
            }
        },
        "required": [ "class" ]
    },


    "TCP_Profile": {
        "title": "TCP Profile",
        "type": "object",
        "$comment": "Configures TCP settings. When deployed on BIG-IP, defaults match f5-tcp-progressive.",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "TCP_Profile"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "abc": {
                "title": "Appropriate Byte Counting",
                "description": "If true (default), congestion window will be adjusted per rfc3465",
                "type": "boolean",
                "default": true
            },
            "ackOnPush": {
                "title": "ACK on PSH",
                "description": "If true (default), segments with PSH flag set will be acknowledged immediately",
                "type": "boolean",
                "default": true
            },
            "autoProxyBufferSize": {
                "title": "Automatic proxy-buffer size",
                "description": "If true (default), proxy buffer size will be adjusted automatically to optimize throughput",
                "type": "boolean",
                "default": true
            },
            "autoReceiveWindowSize": {
                "title": "Automatic receive-window size",
                "description": "If true (default), receive window size will be adjusted automatically to optimize throughput",
                "type": "boolean",
                "default": true
            },
            "autoSendBufferSize": {
                "title": "Automatic send-buffer size",
                "description": "If true (default), send buffer size will be adjusted automatically to optimize throughput",
                "type": "boolean",
                "default": true
            },
            "closeWaitTimeout": {
                "title": "Close-wait timeout",
                "description": "Number of seconds (default 5) connection will remain in LAST-ACK state before exiting.  Value -1 means indefinite, limited by maximum retransmission timeout",
                "type": "integer",
                "minimum": -1,
                "maximum": 3600,
                "default": 5
            },
            "congestionControl": {
                "title": "Congestion-control algorithm",
                "description": "Selects TCP congestion-control algorithm (default 'woodside')",
                "type": "string",
                "enum": [
                    "cdg", "chd", "cubic", "high-speed",
                    "illinois", "new-reno", "none", "reno",
                    "scalable", "vegas", "westwood", "woodside"
                ],
                "default": "woodside"
            },
            "congestionMetricsCache": {
                "title": "Congestion metrics cache",
                "description": "If true (default), congestion metrics may be cached to inform the congestion control algorithm",
                "type": "boolean",
                "default": true
            },
            "congestionMetricsCacheTimeout": {
                "title": "Congestion metrics cache timeout",
                "description": "Number of seconds for which entries in the congestion metrics cache are valid (default 0 means use system default)",
                "type": "integer",
                "minimum": 0,
                "maximum": 1000,
                "default": 0
            },
            "deferredAccept": {
                "title": "Deferred accept",
                "description": "If true, ADC will defer allocating resources to a connection until some payload data has arrived from the client (default false).  This may help minimize the impact of certain DoS attacks but adds undesirable latency under normal conditions.  Note:  'deferredAccept' is incompatible with server-speaks-first application protocols",
                "type": "boolean",
                "default": false
            },
            "delayedAcks": {
                "title": "Delayed ACKs",
                "description": "If true (default), multiple adjacent ACK responses may be coalesced",
                "type": "boolean",
                "default": true
            },
            "delayWindowControl": {
                "title": "Delay-window control",
                "description": "If true, queueing delay as well as packet loss will be used to estimate congestion (default false)",
                "type": "boolean",
                "default": false
            },
            "dsack": {
                "title": "Use D-SACK",
                "description": "If true, rfc2883 duplicate selective-acknowledgements extension will be used (default false).  Do not enable this option unless you are certain all peers support D-SACK",
                "type": "boolean",
                "default": false
            },
            "earlyRetransmit": {
                "title": "Early retransmit",
                "description": "If true (default), rfc5827 Early Retransmit recovery may be used",
                "type": "boolean",
                "default": true
            },
            "ecn": {
                "title": "Explicit congestion notification",
                "description": "If true (default), explicit congestion notification (ECN) flags (CWR, ECE) may be sent to peers",
                "type": "boolean",
                "default": true
            },
            "enhancedLossRecovery": {
                "title": "Enhanced loss recovery",
                "description": "If true (default), Selective ACK data will be used to increase throughput",
                "type": "boolean",
                "default": true
            },
            "fastOpen": {
                "title": "Fast-open",
                "description": "If true (default), the TCP Fast Open protocol extension may be used to reduce latency by sending payload data with initial SYN",
                "type": "boolean",
                "default": true
            },
            "fastOpenCookieExpiration": {
                "title": "Fast-open cookie expiration",
                "description": "Sets maximum lifetime in seconds (default 21600 = six hours) of TCP Fast Open cookies",
                "type": "integer",
                "minimum": 1,
                "maximum": 1000000,
                "default": 21600
            },
            "finWaitTimeout": {
                "title": "FIN-WAIT timeout",
                "description": "Number of seconds (default 5) connection will remain in FIN-WAIT-1 or closing state before exiting.  Value -1 means indefinite, limited by maximum retransmission timeout",
                "type": "integer",
                "minimum": -1,
                "maximum": 3600,
                "default": 5
            },
            "finWait2Timeout": {
                "title": "FIN-WAIT-2 timeout",
                "description": "Number of seconds (default 300) connection will remain in LAST-ACK state before closing.  Value -1 means indefinite, limited by maximum retransmission timeout",
                "type": "integer",
                "minimum": -1,
                "maximum": 3600,
                "default": 300
            },
            "idleTimeout": {
                "title": "Idle timeout",
                "description": "Number of seconds (default 300; may not be 0) connection may remain idle before it becomes eligible for deletion.  Value -1 (not recommended) means infinite",
                "type": "integer",
                "anyOf": [
                    { "minimum": 1, "maximum": 86400 },
                    { "const": -1 }
                ],
                "default": 300
            },
            "initCwnd": {
                "title": "Initial congestion-window size",
                "description": "Sets the initial congestion-window size (default 16) in multiples of MSS (not in octets)",
                "type": "integer",
                "minimum": 0,
                "maximum": 64,
                "default": 16
            },
            "initRwnd": {
                "title": "Initial receive-window size",
                "description": "Sets the initial receive-window size (default 16) in multiples of MSS (not in octets)",
                "type": "integer",
                "minimum": 0,
                "maximum": 64,
                "default": 16
            },
            "ipDfMode": {
                "title": "IP DF mode",
                "description": "Controls DF (Don't Fragment) flag in outgoing packets.  Value 'pmtu' (default) sets DF based on IP PMTU value.  Value 'preserve' copies DF from received packets.  Value 'set' forces DF true in all outgoing packets.  Value 'clear' forces DF false in all outgoing packets",
                "type": "string",
                "enum": [ "clear", "pmtu", "preserve", "set" ],
                "default": "pmtu"
            },
            "ipTosToClient": {
                "title": "IP DSCP (TOS) to client",
                "description": "Specifies the IP DSCP/TOS value in packets sent to clients (default 0).  Numeric values in this property are decimal representations of eight-bit numbers, of which the leftmost six bits are the DSCP per rfc2474 (and the rightmost two bits are used for congestion signaling when 'ecn' is true).  You may have to calculate the value of this property by multiplying a DSCP code, such as CS5+EF = 46, by four to obtain the proper 'ipTosToClient' value, such as 184.  Value 'pass-through' sets DSCP from the initial server-side value.  Value 'mimic' copies DSCP from the most-recently received server-side packet (allowing DSCP to vary during the life of a connection)",
                "type": [ "integer", "string" ],
                "minimum": 0,
                "maximum": 252,
                "multipleOf": 4,
                "pattern": "^(pass-through|mimic)$",
                "default": 0
            },
            "keepAliveInterval": {
                "title": "Keep-alive interval",
                "description": "Number of seconds (default 1800) between keep-alive probes",
                "type": "integer",
                "minimum": 1,
                "maximum": 86400,
                "default": 1800
            },
            "limitedTransmit": {
                "title": "Limited transmit recovery",
                "description": "When true (default), rfc3042 limited transmit recovery scheme may be used",
                "type": "boolean",
                "default": true
            },
            "linkQosToClient": {
                "title": "Link QOS to client",
                "description": "Specifies the Layer-2 QOS code in packets sent to clients (default 0).  Ethernet-type networks recognize codes from 0 to 7.  Value 'pass-through' sets QOS from the initial server-side value",
                "type": [ "integer", "string" ],
                "minimum": 0,
                "maximum": 7,
                "pattern": "^pass-through$",
                "default": 0
            },
            "maxRetrans": {
                "title": "Maximum segment retransmissions",
                "description": "Sets maximum number of times a segment may be retransmitted (default 8)",
                "type": "integer",
                "minimum": 0,
                "maximum": 12,
                "default": 8
            },
            "maxSegmentSize": {
                "title": "MSS",
                "description": "Sets MSS advertised to peer.  Value 0 (default) will set MSS automatically in proportion to interface MTU.  Default 0 is usually the best choice",
                "type": "integer",
                "anyOf": [
                    { "minimum": 28, "maximum": 8960 },
                    { "const": 0 }
                ],
                "default": 0
            },
            "md5Signature": {
                "title": "MD5 signatures",
                "description": "If true, TCP headers will be signed using MD5 per rfc2385 (default false)",
                "type": "boolean",
                "default": false
            },
            "md5SignaturePassphrase": {
                "title": "MD5 passphrase",
                "description": "Passphrase from which key for MD5 signatures (MACs) will be derived when 'md5signature' is true",
                "type": "object",
                "properties": {
                    "allowReuse": {
                        "type": "boolean",
                        "default": false
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/Secret" },
                "f5fetch": "object",
                "f5secret": true
            },
            "minimumRto": {
                "title": "Minimum retransmission timeout",
                "description": "Minimum retransmission timeout in milliseconds (default 1000)",
                "type": "integer",
                "minimum": 1,
                "maximum": 5000,
                "default": 1000
            },
            "mptcp": {
                "title": "Multipath TCP (MPTCP)",
                "description": "Value 'disable' (default) excludes use of Multipath TCP (MPTCP) through virtual server.  Value 'enable' means virtual server will accept and participate in MPTCP connections.  Value 'passthrough' means MPTCP packets may pass through virtual server",
                "type": "string",
                "enum": [ "disable", "enable", "passthrough" ],
                "default": "disable"
            },
            "mptcpCsum": {
                "title": "MPTCP checksums",
                "description": "If true, MPTCP checksums will be calculated (default false)",
                "type": "boolean",
                "default": false
            },
            "mptcpCsumVerify": {
                "title": "MPTCP checksum verify",
                "description": "If true, MPTCP checksums will be verified (default false)",
                "type": "boolean",
                "default": false
            },
            "mptcpFallback": {
                "title": "MPTCP fallback action",
                "description": "Selects action on fallback from MPTCP to ordinary TCP",
                "type": "string",
                "enum": [ "accept", "active-accept", "reset", "retransmit" ],
                "default": "reset"
            },
            "mptcpFastJoin": {
                "title": "MPTCP fast join",
                "description": "If true, data may be sent with MP_JOIN SYN packet, reducing connection latency (default false)",
                "type": "boolean",
                "default": false
            },
            "mptcpIdleTimeout": {
                "title": "Idle timeout",
                "description": "Number of seconds (default 300) connection may remain idle before it becomes eligible for deletion",
                "type": "integer",
                "minimum": 1,
                "maximum": 86400,
                "default": 300
            },
            "mptcpJoinMax": {
                "title": "MPTCP join maximum",
                "description": "Limit on number of subflows which may be joined to MPTCP connection (default 5)",
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "default": 5
            },
            "mptcpMakeAfterBreak": {
                "title": "MPTCP make-after-break",
                "description": "If true, additional subflows may be added during 'mptcpTimeout' period even if ADC is not currently handling an active connection (default false)",
                "type": "boolean",
                "default": false
            },
            "mptcpNoJoinDssAck": {
                "title": "MPTCP fast join",
                "description": "If true, no DSS option will sent with MP_JOIN ACK packet (default false)",
                "type": "boolean",
                "default": false
            },
            "mptcpRtoMax": {
                "title": "MPTCP RTO maximum",
                "description": "Maximum number of retransmission timeouts which may occur before a subflow is declared dead",
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "default": 5
            },
            "mptcpRetransmitMin": {
                "title": "MPTCP retransmit timer",
                "description": "Minimum value in milliseconds (default 1000) of MPTCP retransmission timer",
                "type": "integer",
                "minimum": 1,
                "maximum": 5000,
                "default": 1000
            },
            "mptcpSubflowMax": {
                "title": "MPTCP subflow maximum",
                "description": "Maximum number of subflows per connection (default 6)",
                "type": "integer",
                "minimum": 1,
                "maximum": 20,
                "default": 6
            },
            "mptcpTimeout": {
                "title": "MPTCP timeout",
                "description": "Number of seconds (default 3600) after which MPTCP session with no active flow may be expunged",
                "type": "integer",
                "minimum": 60,
                "maximum": 3600,
                "default": 3600
            },
            "nagle": {
                "title": "Nagle's algorithm",
                "description": "Value 'enable' means to use Nagle's algorithm to minimize the transmission of short TCP segments (note:  Nagle's algorithm yields undesirable results with many application protocols).  Value 'auto' (default) means the ADC will choose automatically whether to enable Nagle's algorithm.  Value 'disable' averts application of Nagle's algorithm",
                "type": "string",
                "enum": [ "disable", "enable", "auto" ],
                "default": "auto"
            },
            "pktLossIgnoreBurst": {
                "title": "Packet loss ignore burst",
                "description": "Modulates use of congestion control when multiple packets are lost.  Value 0 (default) means to perform congestion control if any packets are lost.  Higher values increase tolerance for lost packets before signaling congestion",
                "type": "integer",
                "minimum": 0,
                "maximum": 32,
                "default": 0
            },
            "pktLossIgnoreRate": {
                "title": "Packet loss ignore rate",
                "description": "Sets threshold of packet loss rate (lost-packets/million-packets) above which congestion control is performed.  Value 0 (default) means to perform congestion control if any packets are lost.  Higher values increase tolerance for lost packets before signaling congestion",
                "type": "integer",
                "minimum": 0,
                "maximum": 1000000,
                "default": 0
            },
            "proxyBufferHigh": {
                "title": "Proxy-buffer high",
                "description": "Receive window will be closed when number of octets in proxy buffer rises above this value",
                "type": "integer",
                "minimum": 64,
                "maximum": 33554432,
                "default": 262144
            },
            "proxyBufferLow": {
                "title": "Proxy-buffer low",
                "description": "Receive window will be opened when number of octets in proxy buffer falls below this value",
                "type": "integer",
                "minimum": 64,
                "maximum": 33554432,
                "default": 196608
            },
            "proxyMSS": {
                "title": "Proxy MSS",
                "description": "If true (default), the MSS value advertised on the server side will match that negotiated with the client, if permitted by MTU and other constraints",
                "type": "boolean",
                "default": true
            },
            "proxyOptions": {
                "title": "Proxy options",
                "description": "If true, TCP options such as timestamp advertised on the server side will match those negotiated with client (default false)",
                "type": "boolean",
                "default": false
            },
            "pushFlag": {
                "title": "PuSH flag control",
                "description": "Controls when ADC sets PSH flag in outbound TCP segments.  Limiting the sending of segments with PSH improves performance.  Value 'auto' (recommended) sets PSH according to a system algorithm optimal in most cases.  Value 'default' (not recommended) sets the PUSH flag in every segment which happens to empty the send buffer.  Value 'none' prevents use of the PSH flag, and 'one' means PSH is set only when FIN is, at the end of a connection",
                "type": "string",
                "enum": [ "auto", "default", "none", "one" ],
                "default": "auto"
            },
            "ratePace": {
                "title": "Rate pace",
                "description": "If true (default), system will automatically pace rate of data transmission to optimize throughput",
                "type": "boolean",
                "default": true
            },
            "ratePaceMaxRate": {
                "title": "Rate pace maximum rate",
                "description": "Limit maximum data-transmission rate in octets/second to this value when 'ratePace' is true.  Default 0 means choose maximum rate automatically",
                "type": "integer",
                "minimum": 0,
                "maximum": 4294967295,
                "$comment": "maximum in future: 137438953472",
                "default": 0
            },
            "receiveWindowSize": {
                "title": "Receive-window size",
                "description": "Maximum size of receive window (octets, default 131072)",
                "type": "integer",
                "minimum": 64,
                "maximum": 33554432,
                "default": 131072
            },
            "resetOnTimeout": {
                "title": "Reset on timeout",
                "description": "If true (default), connections which time out will be reset (that is, an RST packet will be sent to the peer) before they are expunged.  Value false is not recommended",
                "type": "boolean",
                "default": true
            },
            "retransmitThreshold": {
                "title": "Retransmit threshold",
                "description": "",
                "type": "integer",
                "minimum": 0,
                "maximum": 12,
                "default": 3
            },
            "selectiveAcks": {
                "title": "Selective ACKs",
                "description": "If true (default), rfc2018 Selective Acknowledgements will be negotiated with peers",
                "type": "boolean",
                "default": true
            },
            "selectiveNack": {
                "title": "Selective NAK",
                "description": "If true, Selective Negative Acknowledgements will be negotiated with peers (default false)",
                "type": "boolean",
                "default": false
            },
            "sendBufferSize": {
                "title": "Send-buffer size",
                "description": "Maximum size of send buffer (octets, default 262144)",
                "type": "integer",
                "minimum": 64,
                "maximum": 33554432,
                "default": 262144
            },
            "slowStart": {
                "title": "Slow-start",
                "description": "If true (default), initial window size will be adjusted per rfc3390.  This generally makes connections start more quickly, NOT more slowly",
                "type": "boolean",
                "default": true
            },
            "synCookieEnable": {
                "title": "SYN cookie enable",
                "description": "If true (default), SYN cookies may be used to avert connection-table overflow (for example, from DoS attacks)",
                "type": "boolean",
                "default": true
            },
            "synCookieWhitelist": {
                "title": "SYN cookie whitelist",
                "description": "If true, after a client responds successfully to a SYN cookie challenge, additional connection requests from that client will be accepted without challenge for 30 seconds (default false)",
                "type": "boolean",
                "default": false
            },
            "synMaxRetrans": {
                "title": "Maximum SYN retransmissions",
                "description": "Maximum number of times SYN is retransmitted when no SYN+ACK is received (default 3)",
                "type": "integer",
                "minimum": 0,
                "maximum": 12,
                "default": 3
            },
            "synRtoBase": {
                "title": "SYN RTO base",
                "description": "Number of milliseconds (default 3000) to which SYN retransmission timer is set initially.  The timer is adjusted after each retransmission to implement binary-exponential-backoff",
                "type": "integer",
                "minimum": 0,
                "maximum": 5000,
                "default": 3000
            },
            "tailLossProbe": {
                "title": "Tail loss probe",
                "description": "If true (default), Tail Loss Probe scheme will be used to reduce retransmission timeouts",
                "type": "boolean",
                "default": true
            },
            "tcpOptions": {
                "title": "TCP options capture for iRules",
                "description": "Selects which TCP Option values will be captured for reference by iRules",
                "type": "array",
                "items": {
                    "title": "Option",
                    "type": "object",
                    "properties": {
                        "option": {
                            "title": "Number",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 255
                        },
                        "when": {
                            "title": "When seen",
                            "type": "string",
                            "enum": [ "first", "last" ]
                        }
                    }
                },
                "minItems": 1,
                "maxItems": 255,
                "$comment": "uniqueItems: true"
            },
            "timestamps": {
                "title": "Timestamps",
                "description": "If true (default and recommended), rfc1323 timestamps will be enabled",
                "type": "boolean",
                "default": true
            },
            "timeWaitRecycle": {
                "title": "TIME-WAIT recycle",
                "description": "If true (default), connection resources will be reused immediately when a SYN is received during the TIME-WAIT period",
                "type": "boolean",
                "default": true
            },
            "timeWaitTimeout": {
                "title": "Time-wait timeout",
                "description": "Number of milliseconds (default 2,000) connection will remain in TIME-WAIT state before closing.  Value -1 means indefinite",
                "type": "integer",
                "minimum": -1,
                "maximum": 600000,
                "default": 2000
            },
            "ttlMode": {
                "title": "TTL mode",
                "description": "Controls IP TTL in outgoing packets.  Value 'set' forces TTL to value of property 'ttlIPv4' or 'ttlIPv6' as appropriate.  Value 'proxy' (default) forces TTL to the default value for IPv4 or IPv6 as appropriate.  Value 'preserve' copies TTL from received packet.  Value 'decrement' sets TTL to one less than received packet's TTL",
                "type": "string",
                "enum": [ "decrement", "preserve", "proxy", "set" ],
                "default": "proxy"
            },
            "ttlIPv4": {
                "title": "TTL for IPv4",
                "description": "TTL to be set in outgoing IPv4 packets",
                "type": "integer",
                "minimum": 1,
                "maximum": 255,
                "default": 255
            },
            "ttlIPv6": {
                "title": "TTL for IPv6",
                "description": "TTL to be set in outgoing IPv6 packets",
                "type": "integer",
                "minimum": 1,
                "maximum": 255,
                "default": 64
            },
            "verifiedAccept": {
                "title": "Verified accept",
                "description": "If true, a server-side connection must be established before a corresponding client-side connection is accepted (default false).  Value 'true' is incompatible with iRules",
                "type": "boolean",
                "default": false
            },
            "zeroWindowTimeout": {
                "title": "Zero-window timeout",
                "description": "Number of milliseconds (default 20,000) connection will persist with window-size of zero (effective timeout is value rounded up to the nearest multiple of 5000).  Value -1 means indefinite",
                "type": "integer",
                "minimum": -1,
                "maximum": 86400000,
                "default": 20000
            }
        },
        "required": [ "class" ]
    },


    "UDP_Profile": {
        "title": "UDP Profile",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "UDP_Profile"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "allowNoPayload": {
                "title": "Allow empty payload",
                "description": "When true, forward UDP datagrams with empty payloads (default false)",
                "type": "boolean",
                "default": false
            },
            "bufferMaxBytes": {
                "title": "Buffer maximum-bytes",
                "description": "Limit to number of octets which may be buffered for a UDP flow (default 655350)",
                "type": "integer",
                "minimum": 65535,
                "maximum": 16777215,
                "default": 655350
            },
            "bufferMaxPackets": {
                "title": "Buffer maximum-packets",
                "description": "Limit to number of packets which may be buffered for a UDP flow (default 0)",
                "type": "integer",
                "minimum": 0,
                "maximum": 255,
                "default": 0
            },
            "datagramLoadBalancing": {
                "title": "Datagram load-balancing",
                "description": "When true, process UDP datagrams independently, without recognizing flows (default false)",
                "type": "boolean",
                "default": false
            },
            "idleTimeout": {
                "title": "Idle timeout",
                "description": "Number of seconds (default 60) flow may remain idle before it becomes eligible for deletion.  Value 0 allows system to recover per-flow resources whenever convenient (always safe with UDP). Value -1 means indefinite (not recommended)",
                "type": "integer",
                "minimum": -1,
                "maximum": 86400,
                "default": 60
            },
            "ipDfMode": {
                "title": "IP DF mode",
                "description": "Controls DF (Don't Fragment) flag in outgoing datagrams.  Value 'pmtu' (default) sets DF based on IP PMTU value.  Value 'preserve' copies DF from received datagram.  Value 'set' forces DF true in all outgoing datagrams.  Value 'clear' forces DF false in all outgoing datagrams",
                "type": "string",
                "enum": [ "clear", "pmtu", "preserve", "set" ],
                "default": "pmtu"
            },
            "ipTosToClient": {
                "title": "IP TOS/DSCP to client",
                "description": "Specifies the IP TOS/DSCP value in packets sent to clients (default 0).  Numeric values in this property are decimal representations of eight-bit numbers, of which the leftmost six bits are the DSCP code per rfc2474 (and the rightmost two bits are reserved).  You may have to calculate the value of this property by multiplying a DSCP code, such as CS5+EF = 46, by four, to obtain the 'ipTosToClient' value, such as 184.  Value 'pass-through' sets DSCP from the initial server-side value.  Value 'mimic' copies DSCP from the most-recently received server-side packet (allowing DSCP to vary during the life of a connection)",
                "type": [ "integer", "string" ],
                "minimum": 0,
                "maximum": 252,
                "multipleOf": 4,
                "pattern": "^(pass-through|mimic)$",
                "default": 0
            },
            "linkQosToClient": {
                "title": "Link QOS to client",
                "description": "Specifies the Layer-2 QOS value in packets sent to clients (default 0).  Ethernet-type networks recognize numeric codes from 0 to 7.  Value 'pass-through' sets QOS from the initial server-side value",
                "type": [ "integer", "string" ],
                "minimum": 0,
                "maximum": 7,
                "pattern": "^pass-through$",
                "default": 0
            },
            "proxyMSS": {
                "title": "Proxy MSS",
                "description": "When true, MSS advertised on the server side will match that negotiated with the client, if permitted by MTU and other constraints (default false)",
                "type": "boolean",
                "default": false
            },
            "ttlMode": {
                "title": "TTL mode",
                "description": "Controls IP TTL in outgoing datagrams.  Value 'set' forces TTL to value of property 'ttlIPv4' or 'ttlIPv6' as appropriate.  Value 'proxy' forces TTL to the default value for IPv4 or IPv6 as appropriate.  Value 'preserve' copies TTL from received datagram.  Value 'decrement' sets TTL to one less than received datagrams's TTL",
                "type": "string",
                "enum": [ "decrement", "preserve", "proxy", "set" ],
                "default": "proxy"
            },
            "ttlIPv4": {
                "title": "TTL for IPv4",
                "description": "TTL to be set in outgoing IPv4 datagrams",
                "type": "integer",
                "minimum": 1,
                "maximum": 255,
                "default": 255
            },
            "ttlIPv6": {
                "title": "TTL for IPv6",
                "description": "TTL to be set in outgoing IPv6 datagrams",
                "type": "integer",
                "minimum": 1,
                "maximum": 255,
                "default": 64
            },
            "useChecksum": {
                "title": "Use checksum",
                "description": "When true, system will validate UDP checksums for IPv4 datagrams (default false).  Checksums are always validated for IPv6",
                "type": "boolean",
                "default": false
            }
        },
        "required": [ "class" ]
    },


    "L4_Profile": {
        "title": "L4 (FastL4) Profile",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "L4_Profile"
            },
            "label": { "$ref": "#/definitions/Label" },
            "remark": { "$ref": "#/definitions/Remark" },

            "clientTimeout": {
                "title": "Client timeout",
                "description": "Number of seconds allowed for a client to transmit enough data to select a server when late binding is enabled. Value -1 means indefinite (not recommended)",
                "type": "integer",
                "minimum": -1,
                "maximum": 86400,
                "default": 30
            },
            "idleTimeout": {
                "title": "Idle timeout",
                "description": "Number of seconds (default 300; may not be 0) connection may remain idle before it becomes eligible for deletion.  Value -1 (not recommended) means infinite",
                "type": "integer",
                "anyOf": [
                    { "minimum": 1, "maximum": 86400 },
                    { "const": -1 }
                ],
                "default": 300
            },
            "looseClose": {
                "title": "Loose close",
                "description": "When true, system closes a loosely-initiated connection when the system receives the first FIN packet from either the client or the server (default false).",
                "type": "boolean",
                "default": false
            },
            "looseInitialization": {
                "title": "Loose initialization",
                "description": "When true, system initializes a connection when it receives any TCP packet, rather than requiring a SYN packet for connection initiation (default false).",
                "type": "boolean",
                "default": false
            },
            "maxSegmentSize": {
                "title": "MSS",
                "description": "Sets MSS advertised to peer.  Value 0 (default) will set MSS automatically in proportion to interface MTU.  Default 0 is usually the best choice",
                "type": "integer",
                "anyOf": [
                    { "minimum": 256, "maximum": 9162 },
                    { "const": 0 }
                ],
                "default": 0
            },
            "resetOnTimeout": {
                "title": "Reset on timeout",
                "description": "If true (default), connections which time out will be reset (that is, an RST packet will be sent to the peer) before they are expunged",
                "type": "boolean",
                "default": true
            },
            "tcpCloseTimeout": {
                "title": "TCP Close timeout",
                "description": "Specifies an TCP close timeout in seconds.  Value -1 means indefinite (not recommended)",
                "type": "integer",
                "minimum": -1,
                "maximum": 86400,
                "default": 5
            },
            "tcpHandshakeTimeout": {
                "title": "TCP Handshake timeout",
                "description": "Specifies a TCP handshake timeout in seconds. The default value is 5 seconds.  Value -1 means indefinite (not recommended)",
                "type": "integer",
                "minimum": -1,
                "maximum": 86400,
                "default": 5
            }
        },
        "required": [ "class" ]
    },

    "Constants": {
        "title": "Constants",
        "description": "Named values for (re-)use by declaration objects",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Constants"
            }
        },

        "additionalProperties": {
            "type": [
                "boolean", "integer", "number",
                "string", "array", "object"
            ],

            "if": {
                "type": "object",
                "required": [ "protected", "ciphertext" ]
            },
            "then": {
                "properties": {
                    "allowReuse": {
                        "title": "Allow reuse",
                        "description": "If true (default), cryptogram may be reused by different declaration objects, WHICH MAY POSE A SECURITY RISK!",
                        "type": "boolean",
                        "default": true
                    }
                },
                "if": true,
                "then": { "$ref": "#/definitions/JWE" }
            }
        },

        "propertyNames": { "pattern": "^[A-Za-z][0-9A-Za-z_]{0,47}$" },
        "required": [ "class" ]
    },


    "Label": {
        "title": "Label",
        "description": "Optional friendly name for this object",
        "type": "string",
        "format": "f5label"
    },


    "Remark": {
        "title": "Remark",
        "description": "Arbitrary (brief) text pertaining to this object (optional)",
        "type": "string",
        "format": "f5remark"
    },


    "Config_Ref": {
        "title": "Config object reference",
        "description": "Reference to declaration or BIG-IP component (if just a string, then AS3 pointer to declaration object)",

        "if": { "type": "string" },
        "then": {
            "minLength": 1,
            "f5pointsTo": { }
        },
        "else": {
            "type": "object",
            "properties": {
                "use": {
                    "title": "Use",
                    "description": "AS3 pointer to declaration object",
                    "type": "string",
                    "minLength": 1,
                    "f5pointsTo": { }
                },
                "bigip": {
                    "title": "BIG-IP component",
                    "description": "Pathname of BIG-IP object",
                    "type": "string",
                    "format": "f5bigip"
                }
            },
            "additionalProperties": false,
            "minimumProperties": 1,
            "maximumProperties": 1
        }
    },


    "F5string": {
        "title": "String value",
        "description": "String value optionally in base64 or from URL or AS3 pointer",

        "if": { "not": { "type": "object" } },
        "then": {
            "type": "string"
        },
        "else": {
            "$comment": "May add 'cryptogram' in future.",
            "properties": {
                "base64": {
                    "title": "Base64",
                    "description": "Base64-encoded value (in JSON string)",
                    "type": "string",
                    "format": "f5base64"
                },
                "text": {
                    "title": "Text",
                    "description": "UTF-8 text (in JSON string)",
                    "type": "string"
                },
                "url": {
                    "title": "URL",
                    "description": "URL from which to retrieve value",
                    "type": "string",
                    "minLength": 3,
                    "f5expand": true
                },
                "copyFrom": {
                    "title": "Copy from",
                    "description": "AS3 pointer to declaration object/property from which to copy value",
                    "type": "string",
                    "format": "f5pointer"
                },
                "bigip": {
                    "title": "BIG-IP component pathname",
                    "description": "Pathname of existing BIG-IP component",
                    "type": "string",
                    "format": "f5bigip"
                }
            },
            "additionalProperties": false,
            "minimumProperties": 1,
            "maximumProperties": 1
        }
    },


    "Secret": {
        "title": "Secret value",
        "description": "A value: (a) in a cryptogram in this object; (b) in a cryptogram elsewhere in this declaration; or (c) available from a URL",
        "type": "object",

        "properties": {
            "allowReuse": {
                "title": "Allow reuse",
                "description": "If true, other declaration objects may reuse this value",
                "type": "boolean"
            },
            "reuseFrom": {
                "title": "Reuse from",
                "description": "AS3 pointer to another JWE cryptogram in this declaration to copy",
                "type": "string",
                "minLength": 1,
                "f5pointsTo": {
                    "type": "object",
                    "required": [ "ciphertext" ]
                }
            },
            "url": {
                "title": "URL",
                "description": "URL from which secret should be fetched",
                "type": "string",
                "format": "url",
                "f5expand": true
            }
        },

        "oneOf": [
            { "required": [ "ciphertext" ] },
            { "required": [ "reuseFrom" ] },
            { "required": [ "url" ] }
        ],

        "if": { "required": [ "ciphertext" ] },
        "then": { "$ref": "#/definitions/JWE" }
    },


    "JWE": {
        "title": "JWE cryptogram",
        "description": "A value in a cryptogram which is a Flattened JWE JSON Serialization object.  If 'miniJWE' is true then enc=(none|f5sv) only (in JOSE header)",
        "type": "object",

        "if": {
            "allOf": [
                { "not": { "properties": { "miniJWE": { "const": false } } } },
                { "not": { "required": [ "encryptedKey" ] } },
                { "not": { "required": [ "tag" ] } }
            ]
        },
        "then": {
            "properties": {
                "miniJWE": {
                    "title": "Mini JWE",
                    "description": "If true (default), object is an f5 mini-JWE",
                    "type": "boolean",
                    "default": true
                },
                "protected": {
                    "title": "JOSE header",
                    "description": "JOSE header: alg=dir, enc=(none|f5sv); default enc=none (encoded default is 'protected'='eyJhbGciOiJkaXIiLCJlbmMiOiJub25lIn0', use with secret simply base64url-encoded into 'ciphertext').  If you see 'protected'='eyJhbGciOiJkaXIiLCJlbmMiOiJmNXN2In0', 'ciphertext' contains base64url-encoded SecureVault cryptogram",
                    "type": "string",
                    "minLength": 2,
                    "format": "f5base64",
                    "default": "eyJhbGciOiJkaXIiLCJlbmMiOiJub25lIn0"
                },
                "ciphertext": {
                    "title": "Ciphertext",
                    "description": "Put base64url(data_value) here",
                    "type": "string",
                    "minLength": 2,
                    "format": "f5base64"
                }
            }
        },
        "else": {
            "properties": {
                "miniJWE": {
                    "title": "Mini JWE",
                    "description": "If true (default), object is an f5 mini-JWE",
                    "type": "boolean",
                    "default": false
                },
                "protected": {
                    "title": "JOSE header",
                    "description": "JOSE header: alg=???, enc=???, optional: typ=JOSE+JSON, use=[F5_use]",
                    "type": "string",
                    "minLength": 2,
                    "format": "f5base64"
                },
                "ciphertext": {
                    "title": "Ciphertext",
                    "description": "Primary data value, encrypted and integrity-protected",
                    "type": "string",
                    "minLength": 2,
                    "format": "f5base64"
                },
                "unprotected": {
                    "title": "Unprotected",
                    "description": "JWE Shared Unprotected Header, if any (neither encrypted nor integrity-protected)",
                    "type": "string",
                    "format": "f5base64"
                },
                "header": {
                    "title": "Header",
                    "description": "JWE Per-Recipient Unprotected Header, if any (neither encrypted nor integrity-protected)",
                    "type": "string",
                    "format": "f5base64"
                },
                "encryptedKey": {
                    "title": "Encrypted key",
                    "type": "string",
                    "format": "f5base64"
                },
                "aad": {
                    "title": "Additional data",
                    "description": "Additional integrity-protected data, if any (not encrypted)",
                    "type": "string",
                    "format": "f5base64"
                },
                "iv": {
                    "title": "Initialization vector",
                    "description": "Cipher initialization vector, if any",
                    "type": "string",
                    "format": "f5base64"
                },
                "tag": {
                    "title": "Tag",
                    "description": "Authentication tag (message authentication code)",
                    "type": "string",
                    "format": "f5base64"
                }
            },
            "required": [ "protected" ]
        }
    },


    "Controls": {
        "title": "Controls",
        "description": "Options to control configuration process",
        "type": "object",

        "properties": {
            "class": {
                "title": "Class",
                "type": "string",
                "const": "Controls",
                "default": "Controls"
            },
            "logLevel": {
                "title": "Log level",
                "description": "Controls the amount of detail in logs produced while configuring this Tenant (default is whole-declaration Controls/logLevel value)",
                "type": "string",
                "enum": [
                    "emergency", "alert", "critical", "error",
                    "warning", "notice", "info", "debug"
                ],
                "default": "error"
            },
            "trace": {
                "title": "Trace",
                "description": "If true, a detailed trace of the configuration process for this Tenant will be created for subsequent analysis (default is whole-declaration Controls/trace value).  Warning:  trace files may contain sensitive configuration data",
                "type": "boolean",
                "default": false
            },
            "fortune": {
                "title": "Fortune",
                "description": "If true, AS3 will activate Zoltar mode and read you your fortune",
                "type": "boolean",
                "default": false
            }
        }
    }
  }
}
