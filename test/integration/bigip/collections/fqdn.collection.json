{
	"info": {
		"_postman_id": "2cc5f887-c279-4b1b-b3e8-be3cb1f1284e",
		"name": "FqdnTesting",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Delete all Tenants",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a04a88c-5bf6-4791-9428-ed6a390249f8",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code for each tenant is 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.results.forEach((r) => pm.expect(r.code).to.eql(200));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{password}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{host}}/mgmt/shared/appsvcs/declare",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"shared",
						"appsvcs",
						"declare"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Tenant with FQDN Pool",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "521770a8-c9ac-4d1b-92cb-3cdef7f8c93e",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code for each tenant is 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.results.forEach((r) => pm.expect(r.code).to.eql(200));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"class\": \"ADC\",\r\n  \"schemaVersion\": \"3.0.0\",\r\n  \"id\": \"urn:uuid:2c54d445-d98b-424e-8818-d291acda5980\",\r\n  \"label\": \"FQDN Test\",\r\n  \"remark\": \"HTTP with service-discovery pool members and iRule\",\r\n  \"FQDN_Test\": {\r\n    \"class\": \"Tenant\",\r\n    \"A1\": {\r\n      \"class\": \"Application\",\r\n      \"template\": \"http\",\r\n      \"serviceMain\": {\r\n        \"class\": \"Service_HTTP\",\r\n         \"virtualAddresses\": [\r\n          \"198.19.192.230\"\r\n        ],\r\n        \"pool\": \"fqdn_pool\"\r\n      },\r\n      \"fqdn_pool\": {\r\n        \"class\": \"Pool\",\r\n        \"monitors\": [\r\n          \"http\"\r\n        ],\r\n        \"members\": [\r\n          {\r\n            \"servicePort\": 80,\r\n            \"addressDiscovery\": \"fqdn\",\r\n            \"autoPopulate\": true,\r\n            \"hostname\": \"test.fqdn\",\r\n            \"addressFamily\": \"IPv4\",\r\n            \"queryInterval\": 10,\r\n            \"downInterval\": 2\r\n          },\r\n          {\r\n            \"servicePort\": 123,\r\n            \"addressDiscovery\": \"fqdn\",\r\n            \"autoPopulate\": false,\r\n            \"hostname\": \"test.fqdn.second\",\r\n            \"addressFamily\": \"IPv4\",\r\n            \"queryInterval\": 10,\r\n            \"downInterval\": 2\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}\r\n"
				},
				"url": {
					"raw": "https://{{host}}/mgmt/shared/appsvcs/declare",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"shared",
						"appsvcs",
						"declare"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check for Pool",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a7d81ca9-bd02-4c8f-9db4-8bfeb07763a8",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Check reponse\", function () {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{host}}/mgmt/tm/ltm/pool/~FQDN_Test~A1~fqdn_pool",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"tm",
						"ltm",
						"pool",
						"~FQDN_Test~A1~fqdn_pool"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check First Pool Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2686862f-e772-44ea-b33d-58e4161298b0",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Check reponse\", function () {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    const jsonData = pm.response.json();",
							"    pm.test(\"Node \\\"test.fqdn\\\" has an autopopulate of enabled\", function () {",
							"        pm.expect(jsonData.fqdn.autopopulate).to.equal(\"enabled\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{host}}/mgmt/tm/ltm/node/~FQDN_Test~test.fqdn",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"tm",
						"ltm",
						"node",
						"~FQDN_Test~test.fqdn"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Second Pool Member",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1b59e24-b4a5-4adb-ab0a-cb579b86787e",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Check reponse\", function () {",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"    ",
							"    const jsonData = pm.response.json();",
							"    pm.test(\"Node \\\"test.fqdn.second\\\" has an autopopulate of disabled\", function () {",
							"        pm.expect(jsonData.fqdn.autopopulate).to.equal(\"disabled\");",
							"    });",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{host}}/mgmt/tm/ltm/node/~FQDN_Test~test.fqdn.second",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"tm",
						"ltm",
						"node",
						"~FQDN_Test~test.fqdn.second"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all Tenants",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c183e76-7d5d-48a8-a0cc-765e976fb48b",
						"exec": [
							"let utils = eval(pm.globals.get('utils'))();",
							"pm = utils.utils.getPM();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code for each tenant is 200\", function () {",
							"    var jsonData = pm.response.json();",
							"    jsonData.results.forEach((r) => pm.expect(r.code).to.eql(200));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{host}}/mgmt/shared/appsvcs/declare",
					"protocol": "https",
					"host": [
						"{{host}}"
					],
					"path": [
						"mgmt",
						"shared",
						"appsvcs",
						"declare"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "{{password}}",
				"type": "string"
			},
			{
				"key": "username",
				"value": "{{username}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e4ef20bd-30a1-4ffc-bb56-cd9ed8276cf0",
				"type": "text/javascript",
				"exec": [
					"pm.variables.set('retryCodes', [503]);",
					"",
					"const isRetrying = pm.variables.get('retrying');",
					"",
					"// If we are not currently retrying, reset number of retries",
					"if (!isRetrying) {",
					"    pm.variables.set('retriesLeft', 10);",
					"}",
					"",
					"postman.setGlobalVariable('utils', () => {",
					"    const isRetrying = pm.variables.get('retrying');",
					"    const pmProxy = {",
					"        get: function(pm, key) {",
					"            if (key == 'test') {",
					"                return (isRetrying ? pm.test.skip : pm.test);",
					"            }",
					"            return pm[key];",
					"        }",
					"    };",
					"    const getPM = () => {",
					"        return new Proxy(pm, pmProxy);",
					"    }",
					"    return {",
					"        utils: {",
					"            getPM",
					"        }",
					"    };",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6bf5ff8e-ee23-4158-9deb-5c54df2c7768",
				"type": "text/javascript",
				"exec": [
					"if (pm.variables.get('retryCodes').includes(pm.response.code)) {",
					"    pm.variables.set('retrying', true);",
					"    let triesLeft = pm.variables.get('retriesLeft');",
					"    if (triesLeft > 1) {",
					"        triesLeft -= 1;",
					"        pm.variables.set('retriesLeft', triesLeft);",
					"        console.log(`503 - Will Retry ${triesLeft} more times`);",
					"        postman.setNextRequest(pm.info.requestName);",
					"    } else {",
					"        pm.expect.fail('Max retries reached');",
					"    }",
					"} else {",
					"    pm.variables.set('retrying', false);",
					"}",
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}